% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ext.r
\name{ext,missing-method}
\alias{ext,missing-method}
\alias{ext}
\alias{ext,GSpatial-method}
\alias{zext,missing-method}
\alias{zext}
\alias{zext,GSpatial-method}
\alias{W,missing-method}
\alias{W}
\alias{W,GSpatial-method}
\alias{E,missing-method}
\alias{E}
\alias{E,GSpatial-method}
\alias{N,missing-method}
\alias{N}
\alias{N,GSpatial-method}
\alias{S,missing-method}
\alias{S}
\alias{S,GSpatial-method}
\alias{top,missing-method}
\alias{top}
\alias{top,GSpatial-method}
\alias{bottom,GSpatial-method}
\alias{bottom}
\title{Spatial bounds of a GRaster or GVector}
\usage{
\S4method{ext}{missing}(x, vector = FALSE)

\S4method{ext}{GSpatial}(x, vector = FALSE)

\S4method{zext}{missing}(x)

\S4method{zext}{GSpatial}(x)

\S4method{W}{missing}(x, char = FALSE)

\S4method{W}{GSpatial}(x, char = FALSE)

\S4method{E}{missing}(x, char = FALSE)

\S4method{E}{GSpatial}(x, char = FALSE)

\S4method{N}{missing}(x, char = FALSE)

\S4method{N}{GSpatial}(x, char = FALSE)

\S4method{S}{missing}(x, char = FALSE)

\S4method{S}{GSpatial}(x, char = FALSE)

\S4method{top}{missing}(x, char = FALSE)

\S4method{top}{GSpatial}(x, char = FALSE)

\S4method{bottom}{GSpatial}(x, char = FALSE)

\S4method{bottom}{GSpatial}(x, char = FALSE)
}
\arguments{
\item{x, obj}{An object that inherits from \code{GSpatial} (i.e., a \code{GRaster} or \code{GVector}) or missing. If missing, then the horizontal or vertical extent of the currently active \link[=tutorial_regions]{region} is returned.}

\item{vector}{Logical: If \code{FALSE} (default), return a \code{SpatExtent} object. If \code{TRUE}, return the extent as a named vector.}

\item{char}{Logical: If \code{FALSE} (default), return a numeric value. If \code{TRUE}, return as a character.}

\item{...}{Other arguments (generally unused).}
}
\value{
The returned values depend on the function:
\itemize{
\item \code{ext()}: A \code{SpatExtent} object (\strong{terra} package) or a numeric vector.
\item \code{zext()}: A numeric vector.
\item \code{W()}, \code{E()}, \code{N()}, \code{S()}, \code{top()}, and \code{bottom()}: A numeric value or character.
\item \code{st_bbox()} returns a \code{bbox} object (\strong{sf} package).
}
}
\description{
These functions return the extent of a \code{GSpatial} object (\code{GRegions}, \code{GRaster}s, and \code{GVector}s):
\itemize{
\item \code{ext()} and \code{st_bbox()}: 2-dimensional spatial extent (i.e., westernmost/easternmost and southernmost/northernmost coordinates of area represented).\cr\cr
\item \code{zext()}: Vertical extent (i.e., topmost and bottom-most elevation of the volume represented). The vertical extent is not \code{NA} only if the object is 3-dimensional.\cr\cr
\item \code{west()}, \code{east()}, \code{north()}, \code{south()}: Coordinates of one side of horizontal extent.\cr\cr
\item \code{top()} and \code{bottom()}: Coordinates of top and bottom of vertical extent.\cr\cr
}
}
\examples{
\dontrun{
# NB This example is in a "dontrun{}" block because it requires users to have
# GRASS GIS Version 8+ installed on their system.

# IMPORTANT #1: If you already have a GRASS session started, you will need to
# run the line below and the last line in this example to work with it again.
# If you have not started a GRASS session, you can skip this step and go to
# step #2.
opts. <- getFastOptions()

# IMPORTANT #2: Select the appropriate line below and change as necessary to
# where GRASS is installed on your system.
grassDir <- "/Applications/GRASS-8.3.app/Contents/Resources" # Mac
grassDir <- "C:/Program Files/GRASS GIS 8.3" # Windows
grassDir <- "/usr/local/grass" # Linux

# setup
library(sf)
library(terra)

# example data
madElev <- fastData("madElev")
madCoast0 <- fastData("madCoast0")
madRivers <- fastData("madRivers")
madDypsis <- fastData("madDypsis")

# start GRASS session for examples only
faster(x = madElev, grassDir = grassDir,
workDir = tempdir(), location = "examples") # line only needed for examples

### GRaster properties
######################

# convert SpatRasters to GRasters
elev <- fast(madElev)
plot(elev)

dim(elev) # rows, columns, depths, layers
nrow(elev) # rows
ncol(elev) # columns
ndepth(elev) # depths
nlyr(elev) # layers

res(elev) # resolution

ncell(elev) # cells
ncell3d(elev) # cells (3D rasters only)

topology(elev) # number of dimensions
is.2d(elev) # is it 2D?
is.3d(elev) # is it 3D?

minmax(elev) # min/max values

# information on the GRASS session in which the GRaster is located
location(elev) # location
mapset(elev) # mapset

# "names" of the object
names(elev)

# coordinate reference system
crs(elev)
st_crs(elev)

# extent (bounding box)
ext(elev)
st_bbox(elev)

# data type
datatype(elev)

# assigning
copy <- elev
copy[] <- pi # assign all cells to the value of pi
copy

# concatenating multiple GRasters
rasts <- c(elev, forest)
rasts

# adding a raster "in place"
add(rasts) <- ln(elev)
rasts

# subsetting
rasts[[1]]
rasts[["forest"]]

# assigning
rasts[[4]] <- elev > 500

# number of layers
nlyr(rasts)

# names
names(rasts)
names(rasts) <- c("elev_meters", "forest", "ln_elev", "high_elevation")
rasts

### GVector properties
######################

# convert sf vectors to GVectors
coast <- fast(madCoast4)
rivers <- fast(madRivers)
dypsis <- fast(madDypsis)

# extent
ext(rivers)
st_bbox(rivers) # extent

W(rivers) # western extent
E(rivers) # eastern extent
S(rivers) # southern extent
N(rivers) # northern extent
top(rivers) # top extent
bottom(rivers) # bottom extent

# coordinate reference system
crs(rivers)
st_crs(rivers)

# column names and data types
names(coast)
datatype(coast)

# session information
location(rivers) # GRASS location
mapset(rivers) # GRASS mapset

# points, lines, or polygons?
geomtype(dypsis)
geomtype(rivers)
geomtype(coast)

is.points(dypsis)
is.points(coast)

is.lines(rivers)
is.lines(dypsis)

is.polygons(coast)
is.polygons(dypsis)

# dimensions
nrow(rivers) # how many spatial features
ncol(rivers) # hay many columns in the data frame

# 2- or 3D
topology(rivers) # dimensionality
is.2d(elev) # is it 2D?
is.3d(elev) # is it 3D?

# refresh values from GRASS
# (reads values from GRASS... does not appear to do anything in this case)
refresh(elev)

### operations on GVectors
##########################

# convert to data frame
as.data.frame(rivers)

# refresh values from GRASS
# (reads values from GRASS... does not appear to do anything in this case)
refresh(rivers)

# IMPORTANT #3: Revert back to original GRASS session if needed.
restoreSession(opts.)
removeSession("examples")

}
}
\seealso{
\code{\link[terra:ext]{terra::ext()}}, \code{\link[sf:st_bbox]{sf::st_bbox()}}
}
