% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/regionExt.r
\name{regionExt}
\alias{regionExt}
\title{Get or set the spatial extent of a GRASS region}
\usage{
regionExt(x = NULL, rastOrVect = NULL, names = TRUE, terra = FALSE)
}
\arguments{
\item{x}{Any of:
\itemize{
\item \code{NULL} (default): Reports the extent of the current region. Also see argument \code{names}.
\item A \code{SpatRaster}, \code{SpatVector}, \code{SpatExtent}, or \code{sf} object: Sets the region's extent to the extent of the object. Note that this does not export the object to the \code{GRASS} session.
\item A vector of four numbers representing the longitude and latitude of the new extent: These must be listed in this order: western longitude, eastern longitude, southern latitude, northern latitude.
\item The name of one or more rasters or vectors in the active \code{GRASS} session: Resizes the extent to exactly encompass all objects.
\item \code{'*'}: Resizes the extent to \emph{all} objects in the active \code{GRASS} session. If you also set \code{rastOrVect} to \code{'rasters'} or \code{'vectors'}, it will resize the region to all rasters or vectors.
}}

\item{rastOrVect}{Either \code{'raster'} or \code{'vector'} (one value per value in \code{x}). If \code{NULL} (default), then the function will attempt to guess whether \code{x} refers to a raster or vector. However, in \code{GRASS}, it is possible to have a raster and a vector of the same name. If this is the case, then you can specify whether \code{x} is a raster or vector (partial matching is supported).}

\item{names}{If \code{TRUE} (default), then the returned vector will have names. Ignored if \code{x} is non-\code{NULL}.}

\item{terra}{If \code{TRUE}, then the returned object will be a \code{\link[terra]{SpatExtent}}. Ignored if \code{x} is non-\code{NULL}.}
}
\value{
Either a numeric vector with four values, or \code{TRUE} (invisibly) if resizing was successful. Also resizes the extent of the \link{region} in the active \code{GRASS} session.
}
\description{
This function either reports the spatial extent of a \code{GRASS} \link{region} or sets a new extent for the region.
}
\examples{
\dontrun{

# IMPORTANT: These function use the "location", "restartGrass", and
# "warn" arguments to avoid interfering with an existing GRASS session.
# WHEN YOU ARE DONE WITH THE EXAMPLES, run this line to revert to your
# active GRASS session:
# initGrass(location='default') # change "location" if not "default"

# IMPORTANT: Change this to where GRASS is installed on your system.
grassDir <- "/Applications/GRASS-8.2.app/Contents/Resources" # for a Mac
grassDir <- 'C:/Program Files/GRASS GIS 8.2' # example for a PC

library(sf)
library(terra)

# get data
madElev <- fasterData('madElev') # large raster
madElevAnt <- fasterData('madElevAnt') # small raster
madRivers <- fasterData('madRivers') # small vector

### initiate a GRASS session and export a large raster
initGrass(rast=madElev, grassDir=grassDir,
restartGrass=TRUE, warn=FALSE, location='examples')

# export the smaller raster and vector
fasterRast(madElevAnt)
fasterVect(madRivers, inVectName='madRivers')

### region properties
regionExt() # extent
regionNcell() # number of cells
regionDim() # dimensions
regionNrow() # rows
regionNcol() # columns

# extent of spatial objects
fasterExt('madElev') # large raster
fasterExt('madElevAnt') # small raster
fasterExt('madElevMan') # small raster
fasterExt('madRivers') # small vector
fasterExt() # extent of all combined

# extent of region (same as largest raster)
regionExt()

### resize region using small raster already in GRASS
regionChangeExt('madElevAnt')
fasterExtRegion()

# import the large raster to R using this region
cropped <- rgrass::read_RAST('madElev', flags='quiet')

# plot: larger raster has been cropped!
plot(madElev, col=paste0('gray', 1:80), main='Cropped')
plot(cropped, legend=FALSE, add=TRUE)

### resize region using small vector already in GRASS
regionResize('madRivers')
fasterExtRegion()

# import the large raster using this region
cropped <- rgrass::read_RAST('madElev', flags='quiet')

# plot: larger raster has been cropped!
plot(madElev, col='red', main='Cropped', legend=FALSE)
plot(cropped, add=TRUE)
plot(st_geometry(madRivers), col='yellow', add=TRUE)

### resize region using a small raster in R
regionResize(madElevMan)
fasterExtRegion()

# import the large raster into R using this region
cropped <- rgrass::read_RAST('madElev', flags='quiet')

# plot: larger raster has been cropped!
plot(madElev, col=paste0('gray', 0:80), main='Cropped', legend=FALSE)
plot(cropped, add=TRUE)

### resize region using user-defined coordinates
extent <- c(740000, 750000, 1060000, 1070000)
regionResize(extent)
fasterExtRegion()

# import the large raster using this region
cropped <- rgrass::read_RAST('madElev', flags='quiet')

# plot: larger raster has been cropped!
plot(madElev, col=paste0('gray', 0:80), main='Cropped', legend=FALSE)
plot(cropped, add=TRUE)

### resize region by growing by a certain number of cells
grow <- 200
regionResize() # first, expand region to encompass all objects
regionResize(grow) # now, grow
fasterExtRegion()

# import the large raster using this region
expanded <- rgrass::read_RAST('madElev', flags='quiet')

# plot: raster has been extended!
plot(expanded, main='Expanded')

# Revert back to original GRASS session.
# Change to your working location if not "default" (it usually is).
initGrass(location='default')

}
}
\seealso{
\code{\link{regionDim}}, \code{\link{regionRes}}, and \code{\link{regionReshape}} in \pkg{fasterRaster}; \code{\link[terra]{ext}} in the \pkg{terra} package; \code{\link[sf]{st_bbox}} in the \pkg{sf} package; \code{GRASS} module \code{\href{https://grass.osgeo.org/grass82/manuals/g.region.html}{g.region}}
}
