% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fasterProjectRast.r
\name{fasterProjectRast}
\alias{fasterProjectRast}
\title{Project and resample a raster}
\usage{
fasterProjectRast(
  rast,
  template = NULL,
  method = "bilinear",
  grassDir = options()$grassDir,
  grassToR = TRUE,
  inRastName = NULL,
  outGrassName = NULL,
  ...
)
}
\arguments{
\item{rast}{A \code{SpatRaster} with one or more layers, \emph{or} the name(s) of one or more raster already in an existing \code{GRASS} session.}

\item{template}{Either \code{NULL} (default) or a \code{SpatRaster} to serve as a template for projecting. If there is an existing \code{GRASS} session (started by another \pkg{fasterRaster} function or through the \code{\link{initGrass}} function), then this argument can be \code{NULL}, and the raster in \code{rast} will be projected to the coordinate reference system used by the current \code{GRASS} session.  However, if a \code{GRASS} session has not yet been started, or a different projection is desired, then this argument must be non-\code{NULL}.}

\item{method}{Character, method for resampling cells:
\itemize{
        \item \code{nearest}: Nearest neighbor (uses value from 1 cell).
        \item \code{bilinear}: Bilinear interpolation (default; uses values from 4 cells).
        \item \code{bilinear_f}: Bilinear interpolation with fallback.
        \item \code{bicubic}: Bicubic interpolation (uses values from 16 cells).
        \item \code{bicubic_f}: Bicubic interpolation with fallback.
        \item \code{lanczos}: Lanczos interpolation (uses values from 25 cells).
        \item \code{lanczos_f}: Lanczos interpolation with fallback.
}}

\item{grassDir}{Name of the folder path in which \code{GRASS} is installed. For a Windows system, this might be something like \code{'C:/Program Files/GRASS GIS 8.2'}. For a Mac system, this might be like \code{"/Applications/GRASS-8.2.app/Contents/Resources"}. If you are using a lot of \pkg{fasterRaster} functions, it can be easier to set this once using \code{\link{fasterOptions}}. By default, this is \code{NULL}, in which case the install path for \code{GRASS} will be searched for, but if not found, will result in an error.}

\item{grassToR}{If \code{TRUE} (default) then the output will be returned to \pkg{R}. If \code{FALSE}, then the output is left in the \code{GRASS} session and named the value in \code{outGrassName}. You can then refer to the output in subsequent \pkg{fasterRaster} functions and avoid the need to re-import it. This is called "chaining" functions together, and it can save a lot of computational time.}

\item{inRastName}{The name of the input raster(s) in \code{GRASS}. If \code{rast} is a multi-layer raster, then there must be one name per layer. This argument is useful if you are "chaining" \pkg{fasterRaster} functions together and wish to refer to the input raster(s) later. The default value is the name(s) of the raster(s) (i.e., \code{names(rast)}).}

\item{outGrassName}{Character. Name of output in \code{GRASS}. This is useful if you want to refer to the output object in \code{GRASS} later in a session by "chaining" functions.}
}
\value{
If \code{grassToR} if \code{TRUE}, then a raster or raster stack with the same extent, resolution, and coordinate reference system as \code{rast}. Regardless, a raster with the name given by \code{outGrassName} is written into the \code{GRASS} session.
}
\description{
Project and resample raster.
}
\details{
Note that it is not uncommon to get the warning "Projection of dataset does not appear to match the current mapset" (followed by more information). If the coordinate reference systems match, then the cause is likely due to extra information being stored in one of the spatial object's coordinate reference system slot (e.g., an EPSG code in addition to the other proj4string information), in which case it can probably be safely ignored.
}
\examples{
\dontrun{

library(terra)

# change this according to where GRASS is installed on your system
grassDir <- 'C:/Program Files/GRASS GIS 8.2' # example for a PC
grassDir <- "/Applications/GRASS-8.2.app/Contents/Resources" # for a Mac

library(sf)
library(terra)

### project a raster using fasterProjectRast()
madChelsa <- fasterData('madChelsa') # unprojected
madElev <- fasterData('madElev') # projected

# coordinate reference systems are different!
crs(madChelsa)
crs(madElev)

madChelsaProj <- fasterProjectRast(rast=madChelsa,
template=madElev, grassDir=grassDir)

crs(madChelsaProj)

### project a vector using fasterProjectVect()
# This is a contrived example, as we will project a vector to a different
# coordinate reference system outside 
madCoast0 <- fasterData('madCoast0')
wgs84 <- '+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84'
madCoast0wgs84 <- st_transform(madCoast0, wgs84)

madCoast0proj <- fasterProjectVect(vect=madCoast0wgs84,
template=madElev, grassDir=grassDir)

# Note that we already created a GRASS session with the call to
# fasterProjectRast(), so we could have used that session's CRS and
# thereby # save some time importing the madElev raster to serve
# as a template:

madCoast0proj <- fasterProjectVect(vect=madCoast0wgs84,
template=NULL, grassDir=grassDir)



}
}
\seealso{
\code{\link[terra]{project}} in \pkg{terra}; \href{https://grass.osgeo.org/grass82/manuals/r.proj.html}{\code{r.proj}} in \code{GRASS}
}
