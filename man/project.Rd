% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/project.r
\name{project,GRaster-method}
\alias{project,GRaster-method}
\alias{project}
\alias{project,GVector-method}
\title{Change the coordinate reference system of a GRaster or GVector}
\usage{
\S4method{project}{GRaster}(
  x,
  y = NULL,
  align = FALSE,
  method = NULL,
  fallback = TRUE,
  wrap = FALSE,
  toLocation = NULL,
  toMapset = NULL
)

\S4method{project}{GVector}(x, y = NULL, toLocation = NULL, toMapset = NULL)
}
\arguments{
\item{x}{A \code{GRaster} or \code{GVector} to be projected.}

\item{y}{\code{NULL} (default), or a \code{GSession} object or any that contain it (i.e., a \code{GRaster}, \code{GVector}, or \code{GRegion}):
\itemize{
\item If \code{y} is \code{NULL}, then \code{x} is projected to the CRS of the current "\link[=tutorial_sessions]{location}" (i.e., \code{x} should not be in the current "location"). If \code{x} is a \code{GRaster}, it will not be resampled to a different resolution.
\item If \code{x} is a \code{GRaster} and \code{y} is a \code{GRaster} or \code{GRegion}, then \code{x} will be projected to the CRS of \code{y} and resampled to the same resolution as \code{y}. \code{x} will be cropped to the extent of \code{y} if \code{align} is \code{TRUE}. \code{x} should not be the same \link[=tutorial_sessions]{location} as \code{y}.
\item If \code{x} is a \code{GRaster} and \code{y} is a \code{GVector}, then \code{x} will be projected to the CRS of \code{y}. \code{x} will not be resampled. \code{x} should not be the same "\link[=tutorial_sessions]{location}" as \code{y}.
\item If \code{x} is a \code{GVector}, then \code{x} will be projected to the CRS of \code{y}.
}}

\item{align}{Logical: If \code{FALSE} (default), and \code{x} and \code{y} are \code{GRaster}s, then the extent of \code{x} will be cropped to the extent of \code{y}.}

\item{method}{Character or \code{NULL} (\code{GRaster}s only): Method to use to conduct the transformation (rasters only). Partial matching is used.
\itemize{
\item \code{NULL} (default): Automatically choose based on raster properties (\code{near} for categorical data, \code{bilinear} for continuous data).
\item \code{"near"}: Nearest neighbor. Best for categorical data, and often a poor choice for continuous data.  If \code{\link[=datatype]{datatype()}} is \code{integer}, this method will be used by default.
\item \code{"bilinear"}: Bilinear interpolation (default for non-categorical data; uses weighted values from 4 cells).
\item \code{"bicubic"}: Bicubic interpolation (uses weighted values from 16 cells).
\item \code{"lanczos"}: Lanczos interpolation (uses weighted values from 25 cells).
}

\emph{Note #1}: If \code{x} and \code{y} are \code{GRaster}s, then the same \code{method} is used to resample \code{x} to the resolution of \code{y} before projecting \code{x}.

\emph{Note #2}: Methods that use multiple cells will cause the focal cell to become \code{NA} if there is at least one cell with an \code{NA} in the cells it draws from. These \code{NA} cells can often be filled using the \code{fallback} option.}

\item{fallback}{Logical (projecting \code{GRaster}s only): If \code{TRUE} (default), then use "lower" methods to fill in \code{NA} cells when a "higher" method is used. For example, if \code{method = "bicubic"}, \code{NA} cells will be filled in using the \code{bilinear} method, except when that results in \code{NA}s, in which case the \code{near} method will be used. Fallback causes fewer cells to revert to \code{NA} values, so may be better at capturing complex "edges" (e.g., coastlines). Fallback does increase processing time because each "lower" method must be applied, then results merged. Fallback is not used if \code{method = "near"}.}

\item{wrap}{Logical (\code{GRaster}s only): When projecting rasters that "wrap around" (i.e., whole-world rasters or rasters that have edges that actually circle around to meet on the globe), \code{wrap} should be \code{TRUE} to avoid removing rows and columns from the "edge" of the map. The default is \code{FALSE}.}

\item{toLocation, toMapset}{Character or \code{NULL} (default): The name of the \link[=tutorial_sessions]{"location" and "mapset"} which have the CRS you to which you want to transform the \code{GRaster} or \code{GVector}. You can get the current location and mapset or the location and mapset of an object using \code{\link[=location]{location()}} and \code{\link[=mapset]{mapset()}}. If left as \code{NULL}, then it will be assumed that you want to project the object to the currently active location and mapset.}
}
\value{
A \code{GRaster} or \code{GVector}.
}
\description{
\emph{fasterRaster}* offers three ways to project rasters and vectors into a different coordinate reference system (CRS). Each of these ways are different from how they are implemented in \strong{terra}, so it is important to understand how it works in \strong{fasterRaster}.

First, if you are wanting to change the CRS for a \code{SpatRaster}, \code{SpatVector}, or \code{sf} object already in \strong{R}, use the \code{\link[=fast]{fast()}} function. This function will project the object to the CRS of the current \strong{GRASS} \link[=tutorial_sessions]{location}. Note that for rasters, the \code{method}, \code{fallback}, and \code{wrap} arguments in the \code{fast()} function may be important to what you want to achieve.

Second, the procedure works the same way for rasters or vectors stored on disk (and not already in \strong{R}). Simply use the \code{\link[=fast]{fast()}} function with the file name of the object. Again, the \code{method}, \code{fallback}, and \code{wrap} arguments may be important .

Third, if you are wanting to change the CRS of a \code{GRaster} or \code{GVector}, you need to initiate a new \strong{GRASS} \link[=tutorial_sessions]{location} using \code{\link[=faster]{faster()}} with the CRS to which you want to transform the object. This means you need to keep track of which \strong{GRASS} "location" you are working in, as multiple rasters and/or vectors can only be used in the function if they are in the same "location."  \emph{This function, \code{project()}, is for projecting \code{GRaster}s or \code{GVector}s between \strong{GRASS} "locations."} You can get the name of the current location with \code{\link[=location]{location()}} (with no arguments), and its coordinate reference system with \code{\link[=crs]{crs()}} or \code{\link[=st_crs]{st_crs()}} (also no arguments).
}
\details{
When projecting a raster, the "fallback" methods in \strong{GRASS} module \code{r.import} are actually used, even though the \code{method} argument takes the strings specifying non-fallback methods. See the manual page for the \code{r.import} \strong{GRASS} module.
}
\examples{
\dontrun{
# NB This example is in a "dontrun{}" block because it requires users to have
# GRASS GIS Version 8+ installed on their system.

# IMPORTANT #1: If you already have a GRASS session started, you will need to
# run the line below and the last line in this example to work with it again.
# If you have not started a GRASS session, you can skip this step and go to
# step #2.
opts. <- getFastOptions()

# IMPORTANT #2: Select the appropriate line below and change as necessary to
# where GRASS is installed on your system.
grassDir <- "/Applications/GRASS-8.3.app/Contents/Resources" # Mac
grassDir <- "C:/Program Files/GRASS GIS 8.3" # Windows
grassDir <- "/usr/local/grass" # Linux

### setup for all examples
##########################

library(sf)
library(terra)

# elevation raster, climate raster, rivers vector
madElev <- fastData("madElev")
madChelsa <- fastData("madChelsa")
madRivers <- fastData("madRivers")

# For this example, we"ll project the madRivers vector to WGS84 using terra.
# (The CHELSA raster stack is already in WGS84.)
madRivers <- vect(madRivers)
madRivers <- project(madRivers, madChelsa)

# working directory
wd <- forwardSlash(tempdir())

### Method 1: Project SpatRasters, SpatVectors, or sf vectors
#############################################################

# Initiate GRASS session:
faster(x = madElev, grassDir = grassDir,
workDir = wd, location = "examples") # line only needed for examples

riversFromVect <- fast(madRivers)
chelsaFromRast <- fast(madChelsa)

### Method 2: Project while loading rasters/vectors from disk
#############################################################

vectFile <- system.file("extdata", "shapes/madCoast.shp", package="fasterRaster")
coastProj <- fast(vectFile)
coastProj

rastFile <- system.file("extdata", "madChelsa.tif", package="fasterRaster")
chelsaFromFile <- fast(rastFile, method="bilinear")
chelsaFromFile

### Method 3a: Projecting between GRASS "locations" but do not resample
#######################################################################

# Set up "to" location:
faster(x = madElev, grassDir = grassDir,
workDir = wd, location = "exampleTo") # line only needed for examples

elev <- fast(madElev)

# Set up "from" location and put a raster and vector in it:
faster(x = madChelsa, grassDir = grassDir,
workDir = wd, location = "exampleFrom") # line only needed for examples

chelsa <- fast(madChelsa)
rivers <- fast(madRivers)

# Re-activate the "exampleTo" "location":
restoreSession(location="exampleTo")

### Project vector into the "exampleTo" location:
riversProj <- project(rivers)
rivers
riversProj

### Project raster into the "exampleTo" location but do not resample:
chelsaSameRes <- project(chelsa)
chelsaSameRes

# Compare to terra:
chelsaSameResTerra <- project(madChelsa, crs(madElev))

minmax(chelsaSameRes)
minmax(chelsaSameResTerra)

chelsaSameResSpat <- rast(chelsaSameRes)
plot(chelsaSameResSpat - chelsaSameResTerra)

### Method 3b: Projecting between GRASS "locations" and resample
################################################################

chelsaResamp <- project(chelsa, elev)
chelsaResamp

# Compare to terra:
chelsaResampTerra <- project(madChelsa, madElev)

minmax(chelsaResamp)
minmax(chelsaResampTerra)

chelsaNewResSpat <- rast(chelsaResamp)
plot(chelsaNewResSpat - chelsaResampTerra)

# IMPORTANT #3: Revert back to original GRASS session if needed.
restoreSession(opts.)
removeSession("examples")
removeSession("exampleFrom")
removeSession("exampleTo")

}
}
\seealso{
\code{\link[terra:project]{terra::project()}}, \code{\link[sf:st_transform]{sf::st_transform()}}, modules \code{r.proj} and \code{v.proj} in \strong{GRASS}
}
