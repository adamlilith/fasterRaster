% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/project.r
\name{project,GRaster-method}
\alias{project,GRaster-method}
\alias{project}
\alias{project,GVector-method}
\title{Change the coordinate reference system of a GRaster or GVector}
\usage{
\S4method{project}{GRaster}(
  x,
  y = NULL,
  method = NULL,
  trim = TRUE,
  location = NULL,
  mapset = NULL
)

\S4method{project}{GVector}(x, y = NULL, location = NULL, mapset = NULL)
}
\arguments{
\item{x}{A \code{GRaster} or \code{GVector}.}

\item{y}{A \code{NULL} (default), or a \code{GRaster} or \code{GVector}:
\itemize{
\item If \code{NULL}, then \code{x} is projected to the CRS of the current \link[=tutorial_location]{location} (i.e., \code{x} should not be in the current "location"). \code{x} will not be resampled.
\item If \code{x} is a \code{GRaster} and \code{y} is a \code{GRaster}, then \code{x} will be projected to the CRS of \code{y} and resampled to the same resolution as \code{y}. \code{x} should not be the same \link[=tutorial_location]{location} as \code{y}.
\item If \code{x} is a \code{GRaster} and \code{y} is a \code{GVector}, then \code{x} will be projected to the CRS of \code{y}. \code{x} will not be resampled. \code{x} should not be the same \link[=tutorial_location]{location} as \code{y}.
\item If \code{x} is a \code{GVector}, then \code{x} will be projected to the CRS of \code{y}.
}}

\item{method}{Character or \code{NULL}: Method to use to conduct the transformation (rasters only). Partial matching is used.
\itemize{
\item \code{NULL} (default): Automatically choose based on raster properties (\code{near} for categorical data, \code{bilinear} for continuous data)
\item \code{'near'}: Nearest neighbor. Best for categorical data, and often a poor choice for continuous data.  If \code{\link[=ncat]{ncat()}} is >0, this method will be used by default.
\item \code{'bilinear'}: Bilinear interpolation (default for non-categorical data; uses weighted values from 4 cells).
\item \code{'bicubic'}: Bicubic interpolation (uses weighted values from 16 cells).
\item \code{'lanczos'}: Lanczos interpolation (uses weighted values from 25 cells).
Note that if \code{x} and \code{y} are \code{GRaster}s, then the same method is used to resample \code{x} to \code{y} before projecting \code{x}.
}}

\item{trim}{Logical: When projecting rasters that "wrap around" (i.e., whole-world rasters or rasters that have edges that actually circle around to meet on the globe), \code{trim} should be \code{FALSE} to avoid removing rows and columns from the "edge" of the map.}

\item{location, mapset}{Character or \code{NULL} (default): The name of the \link[=tutorial_locations]{location} and \link[=tutorial_locations]{mapset} which has the CRS you to which you wish to transform the \code{GRaster} or \code{GVector}. You can get this using \code{\link[=location]{location()}} and \code{\link[=mapset]{mapset()}}. If left as \code{NULL}, then it will be assumed that you want to project the object to the current location and mapset.}
}
\value{
A \code{GRaster} or \code{GVector}.
}
\description{
There are two ways to project rasters and vectors into a different coordinate reference system (CRS) in \strong{fasterRaster}.  Both are different from how they are implemented in other packages, so it is important to understand how it works in \strong{fasterRaster}.

First, if you are wanting to change the CRS for a \code{SpatRaster}, \code{SpatVector}, or a raster or vector on disk, you can use the \code{\link[=fast]{fast()}} function. To do this, you need to start a \strong{GRASS} session using \code{\link[=faster]{faster()}} with the CRS that you want to transform the raster/vector into, then convert the object to a \code{GRaster} or \code{GVector} using \code{\link[=fast]{fast()}}. Note that for rasters the \code{method} argument in that function may be important.

Second, if you are wanting to change the CRS for a \code{GRaster} or \code{GVector}, you need to initiate a new \strong{GRASS} \link[=tutorial_locations]{location} using \code{\link[=faster]{faster()}} with the CRS that you want to transform it into. This means you need to keep track of which "location" you are working in, as multiple rasters and/or vectors can only be used in the function if they are in the same location. \strong{This function, \code{project()}, is for projecting \code{GRaster}s or \code{GVector}s.}
}
\details{
When projecting a raster, the "fallback" methods in \code{r.import} are actually used, even though the \code{method} argument takes the strings for non-fallback methods. See the manual page for the \code{r.import} \strong{GRASS} module.
}
\examples{
\dontrun{
# NB This example is in a "dontrun{}" block because it requires users to have
# GRASS GIS Version 8+ installed on their system.

# IMPORTANT #1: If you already have a GRASS session started, you will need to
# run the line below and the last line in this example to work with it again.
# If you have not started a GRASS session, you can skip this step and go to
# step #2.

# IMPORTANT #2: Select the appropriate line below and change as necessary to
# where GRASS is installed on your system.
grassDir <- "/Applications/GRASS-8.2.app/Contents/Resources" # Mac
grassDir <- 'C:/Program Files/GRASS GIS 8.2' # Windows
grassDir <- '/usr/local/grass' # Linux

# setup
library(sf)
library(terra)

# elevation raster, climate raster, rivers vector
madElev <- fastData('madElev')
madChelsa <- fastData('madChelsa')
madRivers <- fastData('madRivers')

# project rivers to WGS84 using terra (for this example)
# (The CHELSA raster stack is already in WGS84.)
madRivers <- vect(madRivers)
madRivers <- project(madRivers, madChelsa)

# start GRASS session for examples only
wd <- forwardSlash(tempdir())

# set up "to" location
faster(crs = madElev, grassDir = grassDir,
workDir = wd, location = 'exampleTo') # line only needed for examples

elev <- fast(madElev)

# set up "from" location and put a raster and vector in it
faster(crs = madChelsa, grassDir = grassDir,
workDir = wd, location = 'exampleFrom') # line only needed for examples

chelsa <- fast(madChelsa)
rivers <- fast(madRivers)

# re-activate the "exampleTo" location
fastRestore(location='exampleTo')

# project vector into the "exampleTo" location
riversProj <- project(rivers)
rivers
riversProj

# project raster into the "exampleTo" location but do not resample
chelsaProjSameRes <- project(chelsa)

# Project raster into the "exampleTo" location and resample to match template.
# This can take a while...
chelsaProjNewRes <- project(chelsa, elev)

# compare outcomes
chelsaProjSameRes
chelsaProjNewRes

# We get something a bit different if we resample after projecting:
chelsaResampAfterProj <- resample(chelsaProjSameRes, elev)

chelsaProjNewRes
chelsaResampAfterProj

# We can also project rasters/vectors with a different CRS than the current
# "location" by importing them from disk using fast():
vectFile <- system.file('extdata', 'shapes/madCoast.shp', package='fasterRaster')
coastProj <- fast(vectFile)
coastProj

rastFile <- system.file('extdata', 'madChelsa.tif', package='fasterRaster')
chelsaProjFromFile <- fast(rastFile, method='bilinear')
chelsaProjFromFile

# Projecting from file or from location to location yields same results:
chelsaProjSameRes
chelsaProjFromFile

# IMPORTANT #3: Revert back to original GRASS session if needed.
sessionRestore(opts.)
removeSession('exampleFrom')
removeSession('exampleTo')

}
}
