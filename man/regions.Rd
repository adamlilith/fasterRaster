% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/about_region.r
\name{regions}
\alias{regions}
\title{An explanation of \code{GRASS} "regions"}
\description{
Each \code{GRASS} session has a "region" which serves as a template for raster operations. A region does not contain pixel data, but it has a spatial extent and spatial resolution. These can be independent of any rasters or vectors in the \code{GRASS} session. In \code{GRASS}, regions are manipulated with the \code{\href{https://grass.osgeo.org/grass82/manuals/g.region.html}{g.region}} module.

The region extent and resolution affects operations on rasters:
\itemize{
	\item 	All operations conducted on a raster in \code{GRASS} affect on the portion of the raster that overlaps with the region.

 \item	Importing the raster from \code{GRASS} to \code{R} using the \code{\link[rgrass]{read_RAST}} funtion in the \code{rgrass} package will crop the raster to the region. The raster may also be "padded" with rows and columns that are \code{NA} so that its extent matches the region. If the region has a different spatial resolution (or the same, but the region's registration is different from that of the raster), the raster will be resampled to match the resolution and registration of the region. You can import a raster as-is (i.e., not cropped, padded, resampled, or re-registered) from \code{GRASS} using \code{\link{importFromGrass}}.

 \item	Everything in the previous point also applies to saving a raster using \pkg{rgrass} functions \code{\link[rgrass]{execGRASS}} or \code{\link[rgrass]{parseGRASS}} with \code{GRASS} module \code{\href{https://grass.osgeo.org/grass82/manuals/r.out.gdal.html}{r.out.gdal}} or similar. The raster will be cropped, padded, resampled, and re-registered according to the region. To avoid this, you can use \code{\link{fasterWriteRaster}}.
}

Regions generally do \emph{not} affect operations on vectors. The few exceptions are those that convert vectors to rasters, but these are again handled automaticlaly by \pkg{fasterRaster} functions.

With the possible exception of the \code{\link{faster}} function, all functions in \pkg{fasterRaster} automatically manage the region so you do not need to. They set the extent and resolution of any rasters being operated on or saved. The few exceptions explicitly use redefinition of the region to crop, trim, or otherwise explicitly change raster operations, but these are also handled automatically. Users can turn this feature off by setting the \code{autoRegion} argument in most functions to \code{FALSE}, or for all functions at once using:

\code{fasterOptions(autoRegion = FALSE)}

It can be turned back on for a particular function by setting \code{autoRegion = TRUE} when using that function, or for all functions by using:

\code{fasterOptions(autoRegion = TRUE)}

The functions below can be used to view current region settings or to change them:

\itemize{
\item \code{\link{regionExt}}: Spatial extent.
\item \code{\link{regionDim}}: Number of rows and columns.
\item \code{\link{regionRes}}: Spatial resolution.
\item \code{\link{regionReshape}}: Change the extent and resolution/dimensions of the region simultaneously.
}

Since the number of rows and columns, spatial resolution, and spatial extent of a region are interdependent, changing one changes the others.

Unlike \code{GRASS}, \pkg{fasterRaster} does not explicitly support multiple regions for the same location, but they could be manipulated using calls to \code{GRASS} module \code{\href{https://grass.osgeo.org/grass82/manuals/g.region.html}{g.region}} through \code{\link[rgrass]{execGRASS}} or \code{\link[rgrass]{parseGRASS}}.
}
\examples{
\dontrun{

# IMPORTANT: These function use the "location", "restartGrass", and
# "warn" arguments to avoid interfering with an existing GRASS session.
# WHEN YOU ARE DONE WITH THE EXAMPLES, run this line to revert to your
# active GRASS session:
# initGrass(location='default') # change "location" if not "default"

# IMPORTANT: Change this to where GRASS is installed on your system.
grassDir <- "/Applications/GRASS-8.2.app/Contents/Resources" # for a Mac
grassDir <- 'C:/Program Files/GRASS GIS 8.2' # example for a PC

library(sf)
library(terra)

# get data
madElev <- fasterData('madElev') # large raster
madElevAnt <- fasterData('madElevAnt') # small raster
madRivers <- fasterData('madRivers') # small vector

### initiate a GRASS session and export a large raster
initGrass(rast=madElev, grassDir=grassDir,
restartGrass=TRUE, warn=FALSE, location='examples')

# export the smaller raster and vector
fasterRast(madElevAnt)
fasterVect(madRivers, inVectName='madRivers')

### region properties
regionExt() # extent
regionNcell() # number of cells
regionDim() # dimensions
regionNrow() # rows
regionNcol() # columns

# extent of spatial objects
fasterExt('madElev') # large raster
fasterExt('madElevAnt') # small raster
fasterExt('madElevMan') # small raster
fasterExt('madRivers') # small vector
fasterExt() # extent of all combined

# extent of region (same as largest raster)
regionExt()

### resize region using small raster already in GRASS
regionChangeExt('madElevAnt')
fasterExtRegion()

# import the large raster to R using this region
cropped <- rgrass::read_RAST('madElev', flags='quiet')

# plot: larger raster has been cropped!
plot(madElev, col=paste0('gray', 1:80), main='Cropped')
plot(cropped, legend=FALSE, add=TRUE)

### resize region using small vector already in GRASS
regionResize('madRivers')
fasterExtRegion()

# import the large raster using this region
cropped <- rgrass::read_RAST('madElev', flags='quiet')

# plot: larger raster has been cropped!
plot(madElev, col='red', main='Cropped', legend=FALSE)
plot(cropped, add=TRUE)
plot(st_geometry(madRivers), col='yellow', add=TRUE)

### resize region using a small raster in R
regionResize(madElevMan)
fasterExtRegion()

# import the large raster into R using this region
cropped <- rgrass::read_RAST('madElev', flags='quiet')

# plot: larger raster has been cropped!
plot(madElev, col=paste0('gray', 0:80), main='Cropped', legend=FALSE)
plot(cropped, add=TRUE)

### resize region using user-defined coordinates
extent <- c(740000, 750000, 1060000, 1070000)
regionResize(extent)
fasterExtRegion()

# import the large raster using this region
cropped <- rgrass::read_RAST('madElev', flags='quiet')

# plot: larger raster has been cropped!
plot(madElev, col=paste0('gray', 0:80), main='Cropped', legend=FALSE)
plot(cropped, add=TRUE)

### resize region by growing by a certain number of cells
grow <- 200
regionResize() # first, expand region to encompass all objects
regionResize(grow) # now, grow
fasterExtRegion()

# import the large raster using this region
expanded <- rgrass::read_RAST('madElev', flags='quiet')

# plot: raster has been extended!
plot(expanded, main='Expanded')

# Revert back to original GRASS session.
# Change to your working location if not "default" (it usually is).
initGrass(location='default')

}
}
\keyword{tutorial}
