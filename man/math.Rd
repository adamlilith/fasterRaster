% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/05_math_singleLayer.r
\name{abs,GRaster-method}
\alias{abs,GRaster-method}
\alias{abs}
\alias{sin,GRaster-method}
\alias{sin}
\alias{cos,GRaster-method}
\alias{cos}
\alias{tan,GRaster-method}
\alias{tan}
\alias{asin,GRaster-method}
\alias{asin}
\alias{acos,GRaster-method}
\alias{acos}
\alias{atan,GRaster-method}
\alias{atan}
\alias{atan2,GRaster,GRaster-method}
\alias{atan2}
\alias{exp,GRaster-method}
\alias{exp}
\alias{log1p,GRaster-method}
\alias{log1p}
\alias{log,GRaster-method}
\alias{log}
\alias{log2,GRaster-method}
\alias{log2}
\alias{log10,GRaster-method}
\alias{log10}
\alias{sqrt,GRaster-method}
\alias{sqrt}
\alias{round,GRaster-method}
\alias{round}
\alias{floor,GRaster-method}
\alias{floor}
\alias{ceiling,GRaster-method}
\alias{ceiling}
\alias{trunc,GRaster-method}
\alias{trunc}
\title{Mathematical operations on single GRasters}
\usage{
\S4method{abs}{GRaster}(x)

\S4method{sin}{GRaster}(x)

\S4method{cos}{GRaster}(x)

\S4method{tan}{GRaster}(x)

\S4method{asin}{GRaster}(x)

\S4method{acos}{GRaster}(x)

\S4method{atan}{GRaster}(x)

\S4method{atan2}{GRaster,GRaster}(y, x)

\S4method{exp}{GRaster}(x)

\S4method{log1p}{GRaster}(x)

\S4method{log}{GRaster}(x, base = exp(1))

\S4method{log2}{GRaster}(x)

\S4method{log10}{GRaster}(x)

\S4method{sqrt}{GRaster}(x)

\S4method{round}{GRaster}(x, digits = 0)

\S4method{floor}{GRaster}(x)

\S4method{ceiling}{GRaster}(x)

\S4method{trunc}{GRaster}(x)
}
\arguments{
\item{x, y}{\code{GRaster}s}

\item{base}{Numeric: Base of the logarithm.}

\item{digits}{Numeric: Number of digits to round to. If negative, then rounding is to the nearest power of 10. For example, if \code{digits = -2}, then the \code{GRaster} values are rounded to the nearest 100.}
}
\value{
A \code{GRaster}.
}
\description{
You can apply mathematical operators to \code{GRaster}s. These include:\cr
\itemize{
\item Absolute value: \code{abs()}
\item Trigonometric functions (assumes values are in radians): \code{cos()}, \code{sin()}, \code{tan()}, \code{acos()}, \code{asin()}, \code{atan()}, \code{atan2()}
\item Exponential and logarithmic functions: \code{exp()}, \code{log()}, \code{log1p()} \code{log2()}, \code{log10()}
\item Power functions: \code{sqrt()}, \code{x^y}
\item Rounding: \code{round()}, \code{floor()}, \code{ceiling()}, \code{trunc()}
}
}
\examples{
\dontrun{
# NB This example is in a "dontrun{}" block because it requires users to have
# GRASS GIS Version 8+ installed on their system.

# IMPORTANT #1: If you already have a GRASS session started, you will need to
# run the line below and the last line in this example to work with it again.
# If you have not started a GRASS session, you can skip this step and go to
# step #2.
opts. <- getFastOptions()

# IMPORTANT #2: Select the appropriate line below and change as necessary to
# where GRASS is installed on your system.

grassDir <- "/Applications/GRASS-8.2.app/Contents/Resources" # Mac
grassDir <- 'C:/Program Files/GRASS GIS 8.2' # Windows
grassDir <- '/usr/local/grass' # Linux

# setup
library(sf)
library(terra)

# example data
madElev <- fastData('madElev')
madRivers <- fastData('madRivers')

# start GRASS session for examples only
faster(grassDir = grassDir, crs = madElev,
workDir = tempdir(), location = 'examples') # line only needed for examples

# convert a SpatRaster to a GRaster
elev <- fast(madElev)
elevs <- c(elev, elev, elev ^ 0.8 - 100, sqrt(elev))

elev
elevs

# do some math
elev + 100
elev - 100
elev * 100
elev / 100
elev ^ 2
elev \%/\% 100 # divide then round down
elev \%\% 100 # modulus

100 + elev
100 \%/\% elev
100 \%\% elev

elevs + 100
100 + elevs

# math with logicals
elev + TRUE
elev - TRUE
elev * TRUE
elev / TRUE
elev ^ TRUE
elev \%/\% TRUE # divide then round down
elev \%\% TRUE # modulus

elevs + TRUE
TRUE + elevs

# raster interacting with raster
elev + elev
elev - elev
elev * elev
elev / elev
elev ^ log(elev)
elev \%/\% sqrt(elev) # divide then round down
elev \%\% sqrt(elev) # modulus

elevs + elev
elev * elevs
elevs + elevs

# sign
abs(-1 * elev)
abs(elevs)
sqrt(elevs)

# trigonometry
sin(elev)
cos(elev)
tan(elev)

asin(elev)
acos(elev)
atan(elev)
atan2(elev, elev^1.2)

atan(elevs)

# logarithms
exp(elev)
log(elev)
log2(elev)
log1p(elev)
log10(elev)
log(elev, 3)

# rounding
round(elev ^ 1.2)
floor(elev ^ 1.2)
ceiling(elev ^ 1.2)
trunc(elev ^ 1.2)

# comparison
elev < 100
elev <= 100
elev == 100
elev != 100
elev > 100
elev >= 100

elev + 100 < 2 * elev
elev + 100 <= 2 * elev
elev == elev
elev != 100
elev + 100 > 2 * elev
elev + 100 >= 2 * elev

elevs > 10
10 > elevs

# mathematical functions on two or more rasters
mean(elevs)
mmode(elevs)
median(elevs)
nunique(elevs)

sum(elevs)
count(elevs)
min(elevs)
max(elevs)
range(elevs)
skewness(elevs)
kurtosis(elevs)

which.min(elevs)
which.max(elevs)

slope(elevs)
intercept(elevs)
r2(elevs)
tvalue(elevs)

quantile(elevs, 0.9)

# IMPORTANT #3: Revert back to original GRASS session if needed.
fastRestore(opts.)
removeSession('examples')

}
}
