% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/06_GRaster_functions_acrossLayers.r
\name{mean,GRaster-method}
\alias{mean,GRaster-method}
\alias{mean}
\alias{mmode,GRaster-method}
\alias{mmode}
\alias{median,GRaster-method}
\alias{median}
\alias{count,GRaster-method}
\alias{count}
\alias{sum,GRaster-method}
\alias{sum}
\alias{min,GRaster-method}
\alias{min}
\alias{max,GRaster-method}
\alias{max}
\alias{which.min,GRaster-method}
\alias{which.min}
\alias{which.max,GRaster-method}
\alias{which.max}
\alias{sdpop,GRaster-method}
\alias{sdpop}
\alias{varpop,GRaster-method}
\alias{varpop}
\alias{sd,GRaster-method}
\alias{sd}
\alias{var,GRaster-method}
\alias{var}
\alias{nunique,GRaster-method}
\alias{nunique}
\alias{skewness,GRaster-method}
\alias{skewness}
\alias{kurtosis,GRaster-method}
\alias{kurtosis}
\alias{slope,GRaster-method}
\alias{slope}
\alias{intercept,GRaster-method}
\alias{intercept}
\alias{r2,GRaster-method}
\alias{r2}
\alias{tvalue,GRaster-method}
\alias{tvalue}
\alias{range,GRaster-method}
\alias{range}
\alias{quantile,GRaster-method}
\alias{quantile}
\title{Mathematical operations on two or more GRasters}
\usage{
\S4method{mean}{GRaster}(x, na.rm = FALSE)

\S4method{mmode}{GRaster}(x, na.rm = FALSE)

\S4method{median}{GRaster}(x, na.rm = FALSE)

\S4method{count}{GRaster}(x)

\S4method{sum}{GRaster}(x, na.rm = FALSE)

\S4method{min}{GRaster}(x, na.rm = FALSE)

\S4method{max}{GRaster}(x, na.rm = FALSE)

\S4method{which.min}{GRaster}(x)

\S4method{which.max}{GRaster}(x)

\S4method{sdpop}{GRaster}(x, na.rm = FALSE)

\S4method{varpop}{GRaster}(x, na.rm = FALSE)

\S4method{sd}{GRaster}(x, na.rm = FALSE)

\S4method{var}{GRaster}(x, na.rm = FALSE)

\S4method{nunique}{GRaster}(x, na.rm = FALSE)

\S4method{skewness}{GRaster}(x, na.rm = FALSE)

\S4method{kurtosis}{GRaster}(x, na.rm = FALSE)

\S4method{slope}{GRaster}(x, na.rm = FALSE)

\S4method{intercept}{GRaster}(x, na.rm = FALSE)

\S4method{r2}{GRaster}(x, na.rm = FALSE)

\S4method{tvalue}{GRaster}(x, na.rm = FALSE)

\S4method{range}{GRaster}(x, na.rm = FALSE)

\S4method{quantile}{GRaster}(x, prob, na.rm = FALSE)
}
\arguments{
\item{x}{A \code{GRaster}. Typically, this raster will have two or more layers. Values will be calculated within cells across rasters.}

\item{na.rm}{Logical: If \code{FALSE} (default), of one cell value has an \code{NA}, the result will be \code{NA}. If \code{TRUE}, \code{NA}s are ignored.}

\item{prob}{Numeric: Quantile to calculate. Used for \code{quantile()}.}
}
\value{
A \code{GRaster}.
}
\description{
These functions can be applied to a "stack" of \code{GRaster}s with two or more layers:
\itemize{
\item Numeration: \code{count()} (number of non-\code{NA} cells), \code{sum()}.
\item Central tendency: \code{mean()}, \code{mmode()} (mode), \code{median()}.
\item Extremes: \code{min()}, \code{max()}, \code{which.min()} (index of raster with the minimum value), \code{which.max()} (index of the raster with the maximum value)
\item Dispersion: \code{range()}, \code{sd()} (sample standard deviation), \code{var()} (sample variance), \code{sdpop()} (population standard deviation), \code{varpop()} (population variance), \code{nunique()} (number of unique values), \code{quantile()} (use argument \code{probs}), \code{skewness()}, and \code{kurtosis()}.
\item Regression: Assuming we calculate a linear regression for each set of cells through all values of the cells, we can calculate its \code{slope()}, \code{intercept()}, \code{r2()}, and \code{tvalue()}.
}

This function returns a raster. If you want to summarize across cells in a raster (e.g., calculate the mean value of all cells on a raster), use \code{\link[=global]{global()}}.
}
\examples{
\dontrun{
# NB This example is in a "dontrun{}" block because it requires users to have
# GRASS GIS Version 8+ installed on their system.

# IMPORTANT #1: If you already have a GRASS session started, you will need to
# run the line below and the last line in this example to work with it again.
# If you have not started a GRASS session, you can skip this step and go to
# step #2.
opts. <- getFastOptions()

# IMPORTANT #2: Select the appropriate line below and change as necessary to
# where GRASS is installed on your system.

grassDir <- "/Applications/GRASS-8.3.app/Contents/Resources" # Mac
grassDir <- 'C:/Program Files/GRASS GIS 8.3' # Windows
grassDir <- '/usr/local/grass' # Linux

# setup
library(sf)
library(terra)

# example data
madElev <- fastData('madElev')

# start GRASS session for examples only
faster(x = madElev, grassDir = grassDir,
workDir = tempdir(), location = 'examples') # line only needed for examples

# convert a SpatRaster to a GRaster
elev <- fast(madElev)
elevs <- c(elev, elev, log10(elev) - 1, sqrt(elev))
names(elevs) <- c('elev1', 'elev2', 'log_elev', 'sqrt_elev')

elev
elevs

# do some math
elev + 100
elev - 100
elev * 100
elev / 100
elev ^ 2
elev \%/\% 100 # divide then round down
elev \%\% 100 # modulus

100 + elev
100 \%/\% elev
100 \%\% elev

elevs + 100
100 + elevs

# math with logicals
elev + TRUE
elev - TRUE
elev * TRUE
elev / TRUE
elev ^ TRUE
elev \%/\% TRUE # divide then round down
elev \%\% TRUE # modulus

elevs + TRUE
TRUE + elevs

# raster interacting with raster
elev + elev
elev - elev
elev * elev
elev / elev
elev ^ log(elev)
elev \%/\% sqrt(elev) # divide then round down
elev \%\% sqrt(elev) # modulus

elevs + elev
elev * elevs

# sign
abs(-1 * elev)
abs(elevs)
sqrt(elevs)

# trigonometry
sin(elev)
cos(elev)
tan(elev)

asin(elev)
acos(elev)
atan(elev)

atan(elevs)
atan2(elev, elev^1.2)
atan2(elevs, elev^1.2)
atan2(elev, elevs^1.2)
atan2(elevs, elevs^1.2)

# logarithms
exp(elev)
log(elev)
log2(elev)
log1p(elev)
log10(elev)
log(elev, 3)

log(elevs)

# rounding
round(elev + 0.5)
floor(elev + 0.5)
ceiling(elev + 0.5)
trunc(elev + 0.5)

# comparison
elev < 100
elev <= 100
elev == 100
elev != 100
elev > 100
elev >= 100

elev + 100 < 2 * elev

elevs > 10
10 > elevs

# mathematical functions on two or more rasters
mean(elevs)
mmode(elevs)
median(elevs)
nunique(elevs)

sum(elevs)
count(elevs)
min(elevs)
max(elevs)
range(elevs)
skewness(elevs)
kurtosis(elevs)

which.min(elevs)
which.max(elevs)

slope(elevs)
intercept(elevs)
r2(elevs)
tvalue(elevs)

sd(elevs)
sdpop(elevs)
var(elevs)
varpop(elevs)
quantile(elevs, 0.1)

# IMPORTANT #3: Revert back to original GRASS session if needed.
fastRestore(opts.)
removeSession('examples')

}
}
