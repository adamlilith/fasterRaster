% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/faster.r
\name{faster}
\alias{faster}
\title{Generic function to call a \code{GRASS} function (module)}
\usage{
faster(
  mod,
  rast = NULL,
  vect = NULL,
  ...,
  out = NULL,
  flags = c("quiet", "overwrite"),
  grassDir = options()$grassDir,
  grassToR = TRUE,
  inRastName = NULL,
  inVectName = NULL,
  outGrassName = "output"
)
}
\arguments{
\item{mod}{Name of \code{GRASS} module (e.g., \code{'r.latlong'} or \code{'v.buffer'}.}

\item{rast}{A \code{SpatRaster} or the name of a raster already in an existing \code{GRASS} session. If the \code{GRASS} module does not use a raster, this can be \code{NULL}.}

\item{vect}{A \code{Spatvector}, an \code{sf} object, or the name of a spatial vector already in an existing \code{GRASS} session. If the \code{GRASS} module does not use a vector, this can be \code{NULL}.}

\item{...}{Arguments to pass to the \code{GRASS} module through \code{\link[rgrass]{execGRASS}}.}

\item{out}{\code{NULL}, \code{'raster'}, or \code{'vector'} (partial string matching is used). Type of output expected from the \code{GRASS} module.}

\item{flags}{List of flags for the \code{GRASS} module. The default (\code{c('quiet', 'overwrite')}) causes the module to report little/no messages and to overwrite existing files of the same name. For more flags, see the help documentation for the respective \code{GRASS} module.}

\item{grassDir}{Name of the folder path in which \code{GRASS} is installed. For a Windows system, this might be something like \code{'C:/Program Files/GRASS GIS 8.2'}. For a Mac system, this might be like \code{"/Applications/GRASS-8.2.app/Contents/Resources"}. If you are using a lot of \pkg{fasterRaster} functions, it can be easier to set this once using \code{\link{fasterOptions}}. By default, this is \code{NULL}, in which case the install path for \code{GRASS} will be searched for, but if not found, will result in an error.}

\item{grassToR}{If \code{TRUE} (default) then the output will be returned to \pkg{R}. If \code{FALSE}, then the output is left in the \code{GRASS} session and named the value in \code{outGrassName}. You can then refer to the output in subsequent \pkg{fasterRaster} functions and avoid the need to re-import it. This is called "chaining" functions together, and it can save a lot of computational time.}

\item{inRastName}{The name of the input raster(s) in \code{GRASS}. If \code{rast} is a multi-layer raster, then there must be one name per layer. This argument is useful if you are "chaining" \pkg{fasterRaster} functions together and wish to refer to the input raster(s) later. The default value is the name(s) of the raster(s) (i.e., \code{names(rast)}).}

\item{inVectName}{The name of the input vector in \code{GRASS}. This is useful only if you are "chaining" \pkg{fasterRaster} functions together and wish to refer to the input vector later. The default value is \code{'vect'}.}
}
\value{
A raster, vector, or some other product of the \code{GRASS} module.
}
\description{
This function is wrapper for \code{\link[rgrass]{execGRASS}}, plus code necessary to initiate a \code{GRASS} session. Many of the functions in \pkg{fasterRaster} actually utilize this function.  This function works best for modules that take one raster and/or one vector as input and produce one raster or vector as output.
}
\examples{
\dontrun{

library(sf)
library(terra)

# change this to where GRASS is installed on your system:
grassDir <- 'C:/Program Files/GRASS GIS 8.2' # example for a PC
grassDir <- "/Applications/GRASS-8.2.app/Contents/Resources" # for a Mac

madElev <- fasterData('madElev')

# Example using a raster as input, raster as output:
# "r.latlong" creates a raster with cell values equal to latitude (WGS84).
# Note that fasterLongLatRasts() is easier to use.
lat <- faster('r.latlong', rast=madElev, out='rast',
flags=c('quiet', 'overwrite'), grassDir=grassDir)

plot(lat, add=TRUE)

# example using a raster as input, vector as output
# "r.contour" creates a vector of contours
# Note that fasterContour() is easier to use.
conts <- faster('r.contour', rast=madElev, out='vect',
levels=c(100, 200, 300, 400, 500), flags=c('quiet', 'overwrite'),
grassDir=grassDir)

plot(madElev)
plot(conts, add=TRUE)

# Example using a vector as input, raster as output.
# "v.to.rast" creates a raster from a vector (i.e., rasterizes it).
# Note that fasterRasterize() is easier to use.
rastRivers <- faster('v.to.rast', vect=madRivers, outGrassName='rastRivers',
use='val', value=1,
out='rast', flags=c('quiet', 'overwrite'), grassDir=grassDir)

plot(madElev)
plot(rastRivers, col='blue', add=TRUE)

# Example using a vector as input, vector as output.
# "v.buffer" creates a buffer around avector.
# Note that fasterBufferVect() is easier to use.
riverBuff <- faster('v.buffer', vect=madRivers, outGrassName='riverBuff',
distance = 1000,
out='vect', flags=c('quiet', 'overwrite'), grassDir=grassDir)

plot(riverBuff)
plot(st_geometry(madRivers), col='blue', add=TRUE)

# Example using "chaining".
# "v.buffer" creates a buffer around avector.
# "v.to.rast" creates a raster from a vector (i.e., rasterizes it).
# Note that fasterBufferVect() and fasterRasterize() would be easier to use.
faster('v.buffer', vect=madRivers, outGrassName='riverBuff',
distance = 1000,
out='vect', flags=c('quiet', 'overwrite'),
grassDir=grassDir, grassToR=FALSE)

rastBuff <- faster('v.to.rast', vect='riverBuff', outGrassName='rastRivers',
use='val', value=1,
out='rast', flags=c('quiet', 'overwrite'), grassDir=grassDir)

plot(rastBuff)
plot(st_geometry(madRivers), col='blue', add=TRUE)

}
}
\seealso{
See the \code{OS Geo GRASS} websit for a catalog and detailed descriptions of \href{https://grass.osgeo.org/grass82/manuals/vector.html}{vector} and \href{https://grass.osgeo.org/grass82/manuals/raster.html}{raster} modules. Related functions include \code{\link[rgrass]{execGRASS}} in \pkg{rgrass}, and \code{\link{exportRastToGrass}} and \code{\link{exportVectToGrass}} for exporting rasters and vectors to an existing \code{GRASS} session.
}
