% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/app.r
\name{app,GRaster-method}
\alias{app,GRaster-method}
\alias{app}
\alias{appFuns,logical-method}
\alias{appFuns}
\alias{appCheck,GRaster,character-method}
\alias{appCheck}
\title{Apply a function to a set of rasters}
\usage{
\S4method{app}{GRaster}(x, fun, ensure = "auto")

\S4method{appFuns}{logical}(show = TRUE)

\S4method{appCheck}{GRaster,character}(x, fun, msgOnGood = TRUE, failOnBad = TRUE)
}
\arguments{
\item{x}{A \code{GRaster} with one or more named layers.}

\item{fun}{Character: The function to apply. This must be written as a character string that follows these rules:
\itemize{
\item It must begin with an equals sign ("\code{=}"").
\item It must use typical arithmetic operators like \code{+}, \code{-}, \code{*}, \code{/} and/or functions that can be seen using \code{appFuns(TRUE)}.
\item It has no functions that have the same names as the \code{\link[=names]{names()}} of any of the raster layers. Note that \code{x} and \code{y} are forbidden names :(
The help page for \code{r.mapcalc} on the \strong{GRASS} website provides more details.
}}

\item{ensure}{Character: This ensures that rasters are treated as a certain type before they are operated on. This is useful when using rasters that have all integer values, which \strong{GRASS} can assume represent integers, even if they are not supposed to. In this case, the output of operations on this raster might be an integer if otherwise not corrected. Partial matching is used, and options include:
\itemize{
\item \code{"integer"}: Force all rasters to integers by truncating their values. The output may still be of type \code{float} if the operation creates non-integer values.
\item \code{"float"}: Force rasters to be considered floating-point values.
\item \code{"double"}: Force rasters to be considered double-floating point values.
\item \code{"auto"} (default): Ensure that rasters are represented by their native \code{\link[=datatype]{datatype()}} (i.e., "CELL" rasters as integers, "FCELL" rasters as floating-point, and "DCELL" as double-floating point).
}}

\item{show}{Logical (function \code{appFuns()}):
\itemize{
\item \code{FALSE} (default): Return a \code{data.frame} or `data.table`` with definitions of functions.
\item \code{TRUE}: Open a searchable, sortable \strong{shiny} table in a browser.
}}

\item{msgOnGood}{Logical (function \code{appCheck()}): If \code{TRUE} (default), display a message if no overt problems with the raster names and formula are detected.}

\item{failOnBad}{Logical (function \code{appCheck()}): If \code{TRUE} (default), fail if overt problems with raster names and the formula are detected.}
}
\value{
A \code{GRaster}.
}
\description{
\code{app()} applies a function to a set of "stacked" rasters.

This function operates in a manner slightly different from \code{\link[terra:app]{terra::app()}}. The function to be applied \emph{must} be written as a character string. For example, if the raster had layer names "\code{x1}" and "\code{x2}", then the function might be like \code{"= max(sqrt(x1), log(x2))"}. Rasters \strong{cannot} have the same names as functions used in the formula. In this example, the rasters could not be named "max", "sqrt", or "log".

The \code{app()} function will automatically check for raster names that appear also to be functions that appear in the formula, but the \code{appCheck()} function can be applied to the raster stack plus the formula to do this outside of \code{app()}. You can obtain a list of functions using \code{appFuns()}. Note that these are sometimes different from how they are applied in \strong{R}.
}
\seealso{
\code{\link[terra:app]{terra::app()}}, and modules \code{r.mapcalc} and \code{r.mapcalc.simple} in \strong{GRASS}.
}
