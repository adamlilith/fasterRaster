% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/writeRaster.r
\name{writeRaster,GRaster,character-method}
\alias{writeRaster,GRaster,character-method}
\alias{writeRaster}
\alias{writeRaster,missing,missing-method}
\title{Save a GRaster to disk}
\usage{
\S4method{writeRaster}{GRaster,character}(x, filename, overwrite = FALSE, ...)

\S4method{writeRaster}{missing,missing}(x, filename)
}
\arguments{
\item{x}{A \code{GRaster} or missing: If missing, a table of supported file types is reported.}

\item{filename}{Character: Path and file name.}

\item{overwrite}{Logical: If \code{FALSE} (default), do not save over existing file(s).}

\item{...}{Additional arguments. These can include:
\itemize{
\item \code{datatype} The datatype of the values stored in non-ASCII rasters. If \code{NULL}, this will be ascertained from the raster . This can any of:\tabular{llll}{
   \strong{\code{terra}} \tab \strong{\code{GRASS}} \tab \strong{\code{GDAL}} \tab \strong{Values} \cr
   \code{INT1U} \tab \code{CELL} \tab \code{Byte} \tab Integer values from 0 to 255 \cr
   \code{INT2U} \tab \code{CELL} \tab \code{UInt16} \tab Integer values from 0 to 65,534 \cr
   \code{INT2S} \tab \code{CELL} \tab \code{Int16} \tab Integer values from -32,767 to -32,767 \cr
   \code{INT4S} \tab \code{CELL} \tab \code{Int32} \tab Integer values from -2,147,483,647 to 2,147,483,647 \cr
   \code{FLT4S} \tab \code{FCELL} \tab \code{Float32} \tab Values from -3.4e+38 to 3.4e+38, including decimal values \cr
   \code{FLT8S} \tab \code{DCELL} \tab \code{Float64} \tab Values from -1.7e+308 to 1.7e+308, including decimal values \cr
}

\item \code{compressTiff}: Character or \code{NULL}: Type of compression for GeoTIFF files:
\itemize{
\item \code{'DEFLATE'} (default)
\item \code{'LZW'}
\item \code{'PACKBITS'}
\item \code{'LZMA'}
\item \code{NULL}: No compression is used, but the file can still be reduced in size by using zip, gzip, or other compressions.
}
\item \code{bigTiff}: Logical: If \code{TRUE}, and the file format is a GeoTIFF and would be larger than 4 GB (regardless of compression), then the file will be saved in BIGTIFF format.
\item \code{format}: Character, indicating file format. This is usually ascertained from the file extension, but in case this fails, it can be stated explicitly. When using other formats, you may have to specify the \code{createopts} argument, too (see \link[=https://grass.osgeo.org/grass82/manuals/r.out.gdal.html]{r.out.gdal}). Two common formats include:
\itemize{
\item \code{'GTiff'} (default): GeoTIFF \code{filename} ends in \code{.tif}
\item \code{'ASC'}: ASCII \code{filename} ends in \code{.asc}
}
\item Additional arguments to send to \strong{GRASS} modules \code{r.out.gdal} and \code{r.out.ascii}.
\item \code{precision}: Numeric: For ASCII files, you may need to state the number of significant digits. 32-bit values have 7 digits and 64-bit values have 16. So in these cases the argument would be \code{precision=7} or \code{precision=16}.
}}
}
\value{
A \code{GRaster} or a \code{stars} raster. A raster is also saved to disk.
}
\description{
This function saves a \code{GRaster} to disk directly from a \strong{GRASS} session. If the \code{GRaster} was produced in \strong{GRASS} (i.e., not created using \strong{terra} or \strong{stars} then converted to a \code{GRaster}), and you convert it back to a \code{SpatRaster} or \code{stars} raster and want to save it, please consult \code{\link[=writeRaster4]{writeRaster4()}} and \code{\link[=writeRaster8]{writeRaster8()}} for important details!

The function will attempt to ascertain the file type to be ascertained from the file extension, but you can specify the format using the \code{format} argument (see entry for \code{...}). You can see a list of supported formats by simply using this function with no arguments, as in \code{writeRaster()}, or by consulting the online help page for the \strong{GRASS} module \code{r.out.gdal}. Only the \code{GeoTIFF} file format is guaranteed to work for multi-layered rasters.
}
\examples{
\dontrun{
# NB This example is in a "dontrun{}" block because it requires users to have
# GRASS GIS Version 8+ installed on their system.

# IMPORTANT #1: If you already have a GRASS session started, you will need to
# run the line below and the last line in this example to work with it again.
# If you have not started a GRASS session, you can skip this step and go to
# step #2.

# IMPORTANT #2: Select the appropriate line below and change as necessary to
# where GRASS is installed on your system.
grassDir <- "/Applications/GRASS-8.2.app/Contents/Resources" # Mac
grassDir <- 'C:/Program Files/GRASS GIS 8.2' # Windows
grassDir <- '/usr/local/grass' # Linux

# setup
library(terra)

# example data
madElev <- fastData('madElev')

# start GRASS session for examples only
wd <- forwardSlash(tempdir()) # only for examples

fastStart(crs = madElev, grassDir = grassDir,
workDir = wd, location = 'examples') # line only needed for examples

# convert SpatRaster to GRaster
elev <- fast(madElev)

### save GRaster to disk (using temporary file)
filename <- tempfile()
filename <- paste0(filename, '.tif')
writeRaster(elev, filename)

### load raster from disk
elev2 <- fast(filename)
elev2

# IMPORTANT #3: Revert back to original GRASS session if needed.
fastRestore(opts.)
removeSession('examples')

}
}
\seealso{
\code{\link[=writeRaster4]{writeRaster4()}} and \code{\link[=writeRaster8]{writeRaster8()}} for saving a raster created in \strong{GRASS} then imported to \strong{R} using \code{\link[=rast]{rast()}}; \code{\link[terra:writeRaster]{terra::writeRaster()}}
}
