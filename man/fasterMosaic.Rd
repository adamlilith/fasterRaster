% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fasterMosaic.r
\name{fasterMosaic}
\alias{fasterMosaic}
\title{Combine rasters that do not perfectly overlap}
\usage{
fasterMosaic(
  ...,
  cores = 1,
  memory = 300,
  grassDir = options()$grassDir,
  grassToR = TRUE,
  inRastName = NULL,
  outGrassName = "mosaicRast"
)
}
\arguments{
\item{...}{Two or more \code{SpatRasters}.}

\item{cores}{Number of cores to use.}

\item{memory}{Memory to use, in MB. The defualt is 300 MB.}

\item{grassDir}{Name of the folder path in which \code{GRASS} is installed. For a Windows system, this might be something like \code{'C:/Program Files/GRASS GIS 8.2'}. For a Mac system, this might be like \code{"/Applications/GRASS-8.2.app/Contents/Resources"}. If you are using a lot of \pkg{fasterRaster} functions, it can be easier to set this once using \code{\link{fasterOptions}}. By default, this is \code{NULL}, in which case the install path for \code{GRASS} will be searched for, but if not found, will result in an error.}

\item{grassToR}{If \code{TRUE} (default) then the output will be returned to \pkg{R}. If \code{FALSE}, then the output is left in the \code{GRASS} session and named the value in \code{outGrassName}. You can then refer to the output in subsequent \pkg{fasterRaster} functions and avoid the need to re-import it. This is called "chaining" functions together, and it can save a lot of computational time.}

\item{inRastName}{The names of the input rasters in \code{GRASS}. The default value is the names of the raster(s) (i.e., \code{names(raster)}).}

\item{outGrassName}{Character. Name of output in \code{GRASS}. This is useful if you want to refer to the output object in \code{GRASS} later in a session by "chaining" functions.}
}
\value{
A \code{SpatRaster}.
}
\description{
This function combines rasters with (potentially) different extents but the same registration, resolution, and coordinate reference system. The new output rasters will have the extent of the overall set of rasters. Preference is given by the order in which rasters are input. That is, if a given cell has a value in the first and the second raster, then the value in the first raster is used. However, if the cell is \code{NA} in the first raster, then the value in the second raster has will be used, unless the second raster also had \code{NA}, and so on.\cr
Note that unlike most \pkg{fasterRaster} functions, this function changes the extent of the entire \code{GRASS} session (i.e., in \code{GRASS} parlance, the "\href{https://grass.osgeo.org/grass82/manuals/grass_database.html}{location}"). This can affect any existing rasters and downstream analyses that use the extent to crop newly imported rasters or vectors.
}
\examples{
\dontrun{

library(sf)
library(terra)

# We will illustrate mosaicking by breaking apart a raster
# then rejoining it.

madElev <- fasterData('madElev')
madCoast4 <- fasterData('madCoast4')

# crop elevation raster to each Commune
ant <- madCoast4[madCoast4$NAME_4 == 'Antanambe', ]
man <- madCoast4[madCoast4$NAME_4 == 'Manompana', ]

plot(st_geometry(ant), border='blue')
plot(st_geometry(man), add=TRUE, border='red')

# split raster
antElev <- crop(madElev, ant)
manElev <- crop(madElev, man)

names(antElev) <- 'antElev'
names(manElev) <- 'manElev'

# make color patelletes for each raster so we can differentiate them
antCol <- colorRampPalette(c('lightblue', 'darkblue'))
manCol <- colorRampPalette(c('pink', 'darkred'))

antCol <- antCol(10)
manCol <- manCol(10)

plot(st_geometry(madCoast4))
plot(antElev, col=antCol, add=TRUE, legend=FALSE)
plot(manElev, col=manCol, add=TRUE, legend=FALSE)

inRastName <- c('ant', 'man')
combo <- fasterMosaic(antElev, manElev, inRastName=inRastName, cores=2)

plot(combo)

}
}
\seealso{
\code{\link[terra]{mosaic}} in package \pkg{terra}; \href{https://grass.osgeo.org/grass82/manuals/r.patch.html}{\code{r.patch}} in \code{GRASS}
}
