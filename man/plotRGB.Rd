% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotRGB.r
\name{plotRGB,GRaster-method}
\alias{plotRGB,GRaster-method}
\alias{plotRGB}
\title{Create red-green-blue plot from a raster with RGB layers}
\usage{
\S4method{plotRGB}{GRaster}(
  x,
  r = 1,
  g = 2,
  b = 3,
  a = NULL,
  simplify = TRUE,
  maxcell = 5e+05,
  ...
)
}
\arguments{
\item{x}{A \code{GRaster}. Values must be in the range from 0 to 255.}

\item{r, g, b}{Either a numeric integer or the \code{\link[=names]{names()}} of layers representing red, green, and blue components.}

\item{a}{Either \code{NULL} (default), or a numeric integer or the \code{\link[=names]{names()}} of a layer representing transparency.}

\item{simplify}{Logical: If \code{TRUE} (default), then downsample the \code{GRaster} before plotting. This can save time for very dense rasters.}

\item{maxcell}{Positive numeric integer: Maximum number of cells to display. When simplifying, \code{\link[=aggregate]{aggregate()}} will be applied so that it has approximately this number of cells. The default is 500000.}

\item{...}{Arguments to pass to \code{\link[terra:plotRGB]{terra::plotRGB()}}.}
}
\value{
Nothing (makes a plot).
}
\description{
This function takes as its main argument a \code{GRaster} with at least three layers typically representing red, green, and blue components (plus possibly an "alpha", or transparency layer). As with \code{\link[=plot]{plot()}}, this function is somewhat of a hack in that it downsamples the layers to a coarser resolution using \code{\link[=aggregate]{aggregate()}}, saves the raster to disk, then uses \code{\link[terra:plotRGB]{terra::plotRGB()}} to do the actual plotting.
}
\examples{
\dontrun{
# NB This example is in a "dontrun{}" block because it requires users to have
# GRASS GIS Version 8+ installed on their system.

# IMPORTANT #1: If you already have a GRASS session started, you will need to
# run the line below and the last line in this example to work with it again.
# If you have not started a GRASS session, you can skip this step and go to
# step #2.
opts. <- getFastOptions()

# IMPORTANT #2: Select the appropriate line below and change as necessary to
# where GRASS is installed on your system.
grassDir <- "/Applications/GRASS-8.3.app/Contents/Resources" # Mac
grassDir <- "C:/Program Files/GRASS GIS 8.3" # Windows
grassDir <- "/usr/local/grass" # Linux

# Setup
library(terra)

# Example data
madLand <- fastData("madLand")
madRivers <- fastData("madRivers")

# Start GRASS session for examples only:
faster(x = madLand, grassDir = grassDir,
workDir = tempdir(), location = "examples") # line only needed for examples

# Convert SpatRaster to GRaster and SpatVector to GVector
land <- fast(madLand)
rivers <- fast(madRivers)

# Plot:
plot(land[[1L]])
plot(rivers, add = TRUE)

# Histogram:
hist(land)

# Plot surface reflectance in RGB:
plotRGB(land, 3, 2, 1) # "natural" color
plotRGB(land, 4, 1, 2, stretch = "lin") # emphasize near-infrared (vegetation)

# IMPORTANT #3: Revert back to original GRASS session if needed.
restoreSession(opts.)
removeSession("examples")

}
}
\seealso{
\code{\link[terra:plotRGB]{terra::plotRGB()}}, \code{\link[=plot]{plot()}}
}
