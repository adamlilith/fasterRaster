% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aggregate.r
\name{aggregate,GRaster-method}
\alias{aggregate,GRaster-method}
\alias{aggregate}
\title{Aggregate values of raster cells into larger cells}
\usage{
\S4method{aggregate}{GRaster}(
  x,
  fact = 2,
  fun = "mean",
  weight = FALSE,
  prob = NULL,
  na.rm = FALSE
)
}
\arguments{
\item{x}{A \code{GRaster}.}

\item{fact}{Numeric vector: One, two, or three positive values. These reflect the size of the new cells as multiples of the size of the old cells. If just one value is supplied, this is used for all two or three dimensions. If two values are supplied, the first is multiplied by the east-west size of cells, and the second north-south size of cells (the raster must be 2D). If three values are supplied, the third value is used as the multiplier of the vertical dimension of cells. Values are calculated using all cells that have their centers contained by the target cell.

Note that unlike \code{\link[terra:aggregate]{terra::aggregate()}}, these values need not be even integers. Aggregation}

\item{fun}{Character: Name of the function used to aggregate:
\itemize{
\item `mean``: Average (default)
\item \code{median}: Median
\item \code{mode}: Most common value
\item \code{min}: Minimum
\item \code{max}: Maximum
\item \code{range}: Difference between maximum and minimum
\item \code{sum}: Sum
\item \code{varpop}: Population variance
\item \code{sdpop}: Population standard deviation
\item \code{quantile}: Quantile (see argument \code{prob})
\item \code{count}: Number of non-\code{NA} cell
\item \code{diversity}: Number of unique values
}}

\item{weight}{Logical: If \code{FALSE}, each source cell that has its center in the destination cell will be counted equally. If \code{TRUE}, the value of each source will be weighted the proportion of the destination cell the source cell covers.}

\item{prob}{Numeric: Quantile at which to calculate \code{quantile}.}

\item{na.rm}{Logical: If \code{FALSE} (default), propagate \code{NA} cells.}
}
\value{
A \code{GRaster}.
}
\description{
\code{aggregate()} creates a new raster with cells that are an even multiple of the size of the cells of the original raster.
}
\examples{
\dontrun{
# NB This example is in a "dontrun{}" block because it requires users to have
# GRASS GIS Version 8+ installed on their system.

# IMPORTANT #1: If you already have a GRASS session started, you will need to
# run the line below and the last line in this example to work with it again.
# If you have not started a GRASS session, you can skip this step and go to
# step #2.
opts. <- getFastOptions()

# IMPORTANT #2: Select the appropriate line below and change as necessary to
# where GRASS is installed on your system.

grassDir <- "/Applications/GRASS-8.3.app/Contents/Resources" # Mac
grassDir <- "C:/Program Files/GRASS GIS 8.3" # Windows
grassDir <- "/usr/local/grass" # Linux

# setup
library(terra)

# example data
madElev <- fastData("madElev")

# start GRASS session for examples only
faster(x = madElev, grassDir = grassDir,
workDir = tempdir(), location = "examples") # line only needed for examples

# convert a SpatRaster to a GRaster
elev <- fast(madElev)

### aggregate by same factor in 2 dimensions
# fasterRaster
agg2 <- aggregate(elev, 2, "mean")
agg2

# terra
agg2terra <- aggregate(madElev, 2, "mean")
agg2terra

# compare fasterRaster and terra... should be the same
agg2 <- rast(agg2)
agg2 <- extend(agg2, agg2terra)
agg2 - agg2terra

### aggregate by a factor of 2.5 in 2 dimensions
# fasterRaster
agg2.9 <- aggregate(elev, 2.9, "mean")
agg2.9

# terra
agg2.9terra <- aggregate(madElev, 2.9, "mean")
agg2.9terra

# compare fasterRaster and terra... should be different
res(agg2.9)
res(agg2.9terra) # terra rounds aggregation factor down
2 * res(madElev) # original resolution multipled by 2

# aggregate by different factor in 2 dimensions
agg2x3 <- aggregate(elev, c(2, 3), "mean")
agg2x3

# IMPORTANT #3: Revert back to original GRASS session if needed.
fastRestore(opts.)
removeSession("examples")

}
}
\seealso{
\code{\link[terra:aggregate]{terra::aggregate()}}, \code{\link[terra:disaggregate]{terra::disagg()}}, module \code{r.resamp.stats} in \strong{GRASS}
}
