% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tutorial_raster_data_types.r
\name{tutorial_raster_data_types}
\alias{tutorial_raster_data_types}
\title{Raster data types}
\description{
\strong{fasterRaster} \code{GRaster}s can represent three numeric data types and one categorical type.
\subsection{\code{CELL}/Integer values}{

Rasters that represent integers are of type \code{CELL} in \strong{GRASS} and \strong{fasterRaster}. You can force a raster to be an integer using \code{as.cell()}. Some of the functions in \code{\link[=app]{app()}} function will also return integer-type rasters. Integer rasters typically take the least memory.
}

\subsection{\code{FCELL}/Floating-point values}{

Floating-point values are accurate to about the 7th decimal place. These are called \code{FCELL} rasters in \strong{GRASS} and \strong{fasterRaster}. By default, operations conducted using raster math (e.g., \code{raster1 * raster2}) return floating-point valued rasters, but this can be changed using \code{\link[=setFastOptions]{setFastOptions()}} (e.g., \code{setFastOptions(rasterDataType = "DCELL")}). Floating-point rasters typically take more memory than integer rasters, but less than double-floating point rasters.
}

\subsection{\code{DCELL}/Double-floating point values}{

Double-floating point values are accurate to about the 15th decimal place, and are called \code{DCELL} rasters in \strong{GRASS} and \strong{fasterRaster}. These rasters typically take the most memory.
}

\subsection{Categorical rasters}{

Categorical rasters are actually \code{CELL} (integer) rasters, but have an associated attribute table that maps each integer value to a category label, such as "wetland" or "forest".
}

\subsection{Functions relevant to raster data types}{
\itemize{
\item \code{\link[=datatype]{datatype()}} returns \code{CELL}, \code{DCELL}, or \code{FCELL}.
\item \code{\link[=is.cell]{is.cell()}}, \code{\link[=is.fcell]{is.fcell()}}, and \code{\link[=is.dcell]{is.dcell()}} indicate if the raster is of the given type.
\item \code{\link[=as.cell]{as.cell()}}, \code{\link[=as.fcell]{as.fcell()}}, and \code{\link[=as.dcell]{as.dcell()}} coerces a raster to the given type.
\item \code{\link[=is.factor]{is.factor()}} indicates if the raster is a categorical raster.
\item \code{\link[=levels]{levels()}} returns the attribute table of a categorical raster (or a blank list if the raster is not categorical).
\item \code{\link[=nlevels]{nlevels()}} returns the number of categorical values represented by a categorical raster.
}
}

\subsection{Saving rasters to disk}{

You can save substantial space on disk if you set the \code{datatype} argument in \code{\link[=writeRaster]{writeRaster()}} when saving a raster. This argument allows for finer "divisions" than just integer/float/double-float, so depending on the range of values in your raster, you can optimize file size by selecting the one that best matches the values in the raster. See the documentation for \code{\link[=writeRaster]{writeRaster()}} for more information.
}
}
\examples{
\dontrun{
# NB This example is in a "dontrun{}" block because it requires users to have
# GRASS GIS Version 8+ installed on their system.

# IMPORTANT #1: If you already have a GRASS session started, you will need to
# run the line below and the last line in this example to work with it again.
# If you have not started a GRASS session, you can skip this step and go to
# step #2.
opts. <- getFastOptions()

# IMPORTANT #2: Select the appropriate line below and change as necessary to
# where GRASS is installed on your system.
grassDir <- "/Applications/GRASS-8.3.app/Contents/Resources" # Mac
grassDir <- "C:/Program Files/GRASS GIS 8.3" # Windows
grassDir <- "/usr/local/grass" # Linux

# setup
library(sf)
library(terra)

# example data
madElev <- fastData("madElev")
madCoast0 <- fastData("madCoast0")
madRivers <- fastData("madRivers")
madDypsis <- fastData("madDypsis")

# start GRASS session for examples only
faster(x = madElev, grassDir = grassDir,
workDir = tempdir(), location = "examples") # line only needed for examples

### GRaster properties
######################

# convert SpatRasters to GRasters
elev <- fast(madElev)
plot(elev)

dim(elev) # rows, columns, depths, layers
nrow(elev) # rows
ncol(elev) # columns
ndepth(elev) # depths
nlyr(elev) # layers

res(elev) # resolution

ncell(elev) # cells
ncell3d(elev) # cells (3D rasters only)

topology(elev) # number of dimensions
is.2d(elev) # is it 2D?
is.3d(elev) # is it 3D?

minmax(elev) # min/max values

# information on the GRASS session in which the GRaster is located
location(elev) # location
mapset(elev) # mapset

# "names" of the object
names(elev)

# coordinate reference system
crs(elev)
st_crs(elev)

# extent (bounding box)
ext(elev)
st_bbox(elev)

# data type
datatype(elev)

# assigning
copy <- elev
copy[] <- pi # assign all cells to the value of pi
copy

# concatenating multiple GRasters
rasts <- c(elev, forest)
rasts

# adding a raster "in place"
add(rasts) <- ln(elev)
rasts

# subsetting
rasts[[1]]
rasts[["forest"]]

# assigning
rasts[[4]] <- elev > 500

# number of layers
nlyr(rasts)

# names
names(rasts)
names(rasts) <- c("elev_meters", "forest", "ln_elev", "high_elevation")
rasts

### GVector properties
######################

# convert sf vectors to GVectors
coast <- fast(madCoast4)
rivers <- fast(madRivers)
dypsis <- fast(madDypsis)

# extent
ext(rivers)
st_bbox(rivers) # extent

west(rivers) # western extent
east(rivers) # eastern extent
south(rivers) # southern extent
north(rivers) # northern extent
top(rivers) # top extent
bottom(rivers) # bottom extent

# coordinate reference system
crs(rivers)
st_crs(rivers)

# column names and data types
names(coast)
datatype(coast)

# session information
location(rivers) # GRASS location
mapset(rivers) # GRASS mapset

# points, lines, or polygons?
geomtype(dypsis)
geomtype(rivers)
geomtype(coast)

is.points(dypsis)
is.points(coast)

is.lines(rivers)
is.lines(dypsis)

is.polygons(coast)
is.polygons(dypsis)

# dimensions
nrow(rivers) # how many spatial features
ncol(rivers) # hay many columns in the data frame

# 2- or 3D
topology(rivers) # dimensionality
is.2d(elev) # is it 2D?
is.3d(elev) # is it 3D?

# refresh values from GRASS
# (reads values from GRASS... does not appear to do anything in this case)
refresh(elev)

### operations on GVectors
##########################

# convert to data frame
as.data.frame(rivers)

# refresh values from GRASS
# (reads values from GRASS... does not appear to do anything in this case)
refresh(rivers)

# IMPORTANT #3: Revert back to original GRASS session if needed.
fastRestore(opts.)
removeSession("examples")

}
}
\keyword{tutorial}
