% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fasterProjectVect.r
\name{fasterProjectVect}
\alias{fasterProjectVect}
\title{Project a spatial vector}
\usage{
fasterProjectVect(
  vect,
  template = NULL,
  faster = FALSE,
  replace = FALSE,
  inVectName = NULL,
  outGrassName = "projectedVect",
  outVectClass = NULL,
  grassToR = TRUE,
  grassDir = options()$grassDir,
  inits = NULL
)
}
\arguments{
\item{vect}{A \code{SpatVector}, an \code{sf} object, or the name of a spatial vector in the active \code{GRASS} session.}

\item{template}{Either \code{NULL} (default), \emph{or} a \code{SpatRaster}, \code{SpatVector}, or object of class \code{sf} to serve as a template for projecting. If there is an existing \code{GRASS} session (started by another \pkg{fasterRaster} function or through the \code{\link{initGrass}} function), then this can be \code{NULL}, and the vector in \code{vect} will be projected to the one used by the current \code{GRASS} session.  However, if a \code{GRASS} session has not yet been started, or a different projection is desired, then this argument must be non-\code{NULL}.}

\item{faster}{If \code{TRUE}, then do not build vector topology in \code{GRASS}. This can speed up projections for very large vectors, and is useful if the vector is not going to be used further in \code{GRASS}. If \code{FALSE} (default), then topology is built.}

\item{replace}{Logical or \code{NULL}. If \code{FALSE} or \code{NULL} (default), then attempting to overwrite rasters or vectors already in a \code{GRASS} session will result in an error. You can allow overwriting by changing this to \code{TRUE}, or by setting \code{inRastName}, \code{inVectName}, and/or \code{outGrassName} to values different from rasters or vectors that already exist in the session (not all functions have these arguments). Use \code{\link{fasterLs}} to see existing rasters and vectors.  You can set this for all functions at once using \code{\link{fasterOptions}}.}

\item{inVectName}{Character. The name of the input vector in \code{GRASS}. If missing or \code{NULL}, \"code{inputVect}" will be used. This is useful if you are \link{chaining} \pkg{fasterRaster} functions together and wish to refer to the vector later in the \code{GRASS} session.}

\item{outGrassName}{Character. Name of output in \code{GRASS}. This is useful if you want to refer to the output object in \code{GRASS} later in a session by \link{chaining} functions.}

\item{outVectClass}{Character or \code{NULL}. This sets the class of spatial vectors imported back to \code{R} from \code{GRASS}. If \code{'SpatRaster'} or \code{NULL} 9default), a \code{SpatVector} from the \pkg{terra} package is returned. If \code{'sf'}, an \code{sf} object from the \pkg{sf} package is returned. This argument is ignored if \code{grassToR} is \code{FALSE}. You can set this argument for all functions at once using \code{\link{fasterOptions}}.}

\item{grassToR}{Logical or \code{NULL}. If \code{TRUE} or \code{NULL} (default) then the output will be returned to \code{R}. If \code{FALSE}, then the output is left in the \code{GRASS} session (with the name given by \code{outGrassName}). You can set this argument for all functions at once using \code{\link{fasterOptions}}.}

\item{grassDir}{Character or \code{NULL}. Name of the path in which \code{GRASS} is installed. For a Windows system, this might be something like \code{'C:/Program Files/GRASS GIS 8.3'}, for a Mac, like \code{"/Applications/GRASS-8.3.app/Contents/Resources"}, and for Linux like \code{'/usr/local/grass'}. If you are using a lot of \pkg{fasterRaster} functions, you can set this for all functions at once using \code{\link{fasterOptions}}. By default, this is \code{NULL}, in which case the install path for \code{GRASS} will be searched for, but if not found, will result in an error (usually the case).}

\item{inits}{Either \code{NULL} (default), or a named list of arguments to pass to \code{\link{initGrass}}. If \code{NULL}, then the current active \code{GRASS} session is used, or a new one in the "default" location is created.}

\item{method}{Character, method for resampling cells:
\itemize{
        \item \code{nearest}: Nearest neighbor (uses value from 1 cell).
        \item \code{bilinear}: Bilinear interpolation (default; uses values from 4 cells).
        \item \code{bilinear_f}: Bilinear interpolation with fallback.
        \item \code{bicubic}: Bicubic interpolation (uses values from 16 cells).
        \item \code{bicubic_f}: Bicubic interpolation with fallback.
        \item \code{lanczos}: Lanczos interpolation (uses values from 25 cells).
        \item \code{lanczos_f}: Lanczos interpolation with fallback.
}}
}
\value{
If \code{grassToR} if \code{TRUE}, then a raster or raster stack with the same extent, resolution, and coordinate reference system as \code{rast}. Regardless, a raster with the name given by \code{outGrassName} is written into the \code{GRASS} session.
}
\description{
Project a spatial vector.
}
\details{
Note that it is not uncommon to get the warning "Projection of dataset does not appear to match the current mapset" (followed by more information). If the coordinate reference systems match, then the cause is likely due to extra information being stored in one of the spatial object's coordinate reference system slot (e.g., an EPSG code in addition to the other proj4string information), in which case it can probably be safely ignored.
}
\examples{
\dontrun{

library(terra)

# change this according to where GRASS is installed on your system
grassDir <- 'C:/Program Files/GRASS GIS 8.2' # example for a PC
grassDir <- "/Applications/GRASS-8.2.app/Contents/Resources" # for a Mac

library(sf)
library(terra)

# These examples project and resample a "stack" of 4 rasters (madChelsa).

### project a raster using a template raster
madChelsa <- fasterData('madChelsa') # unprojected
madElev <- fasterData('madElev') # projected

# coordinate reference systems are different!
crs(madChelsa)
crs(madElev)

madChelsaProj <- fasterProjectRast(rast=madChelsa,
template=madElev, grassDir=grassDir)

crs(madElev)
crs(madChelsaProj)

### project a raster using the current session as a template
# This session was created by the previous faster function
# and is still active.
madChelsaProj <- fasterProjectRast(rast=madChelsa, grassDir=grassDir)


### project a vector using fasterProjectVect()
# This is a contrived example, as we will project a vector to a different
# coordinate reference system (in R), then reproject it back to the original.
madCoast0 <- fasterData('madCoast0')
wgs84 <- '+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84'
madCoast0wgs84 <- st_transform(madCoast0, wgs84)

madCoast0proj <- fasterProjectVect(vect=madCoast0wgs84,
template=madElev, grassDir=grassDir)

# Note that we already created a GRASS session with the call to
# fasterProjectRast(), so we could have used that session's CRS and
# thereby # save some time importing the madElev raster to serve
# as a template:

madCoast0proj <- fasterProjectVect(vect=madCoast0wgs84,
template=NULL, grassDir=grassDir)

}
}
\seealso{
\code{\link{fasterProjectRast}} and \code{\link{fasterCRS}} in \pkg{fasterRaster}; \code{\link[terra]{project}} in \pkg{terra}; \href{https://grass.osgeo.org/grass82/manuals/v.proj.html}{\code{v.proj}} in \code{GRASS}
}
