% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as.int.r
\name{as.int,GRaster-method}
\alias{as.int,GRaster-method}
\alias{as.int}
\alias{as.float,GRaster-method}
\alias{as.float}
\alias{as.doub,GRaster-method}
\alias{as.doub}
\title{Coerce raster to integer, float, or double precision}
\usage{
\S4method{as.int}{GRaster}(x)

\S4method{as.float}{GRaster}(x)

\S4method{as.doub}{GRaster}(x)
}
\arguments{
\item{x}{A \code{GRaster}.}
}
\value{
A \code{GRaster}.
}
\description{
In \strong{fasterRaster}, rasters can have three \link[=tutorial_raster_data_types]{data types}: "factor" (categorical rasters), "integer" (integers), "float" (floating point values, accurate to ~7 decimal places), and "double" (double-precision values, accurate to ~15 decimal places). The type of raster can be checked with:
\itemize{
\item \code{as.int()}: Coerce values to integers (\strong{GRASS} type \code{CELL}).
\item \code{as.float()}: Coerce values to floating-point precision.
\item \code{as.doub()}: Coerce values to double-floating point precision.
\item Integer rasters can be converted categorical rasters by adding "levels" tables with \link{levels<-} or \code{\link[=categories]{categories()}}.
}
}
\examples{
if (grassStarted()) {

# Setup
library(terra)

# Example data
madElev <- fastData("madElev")
madForest2000 <- fastData("madForest2000")

# Convert SpatRasters to GRasters
elev <- fast(madElev)
forest <- fast(madForest2000)

### GRaster properties
######################

# plotting
plot(elev)

# dimensions
dim(elev) # rows, columns, depths, layers
nrow(elev) # rows
ncol(elev) # columns
ndepth(elev) # depths
nlyr(elev) # layers

res(elev) # resolution (2D)
res3d(elev) # resolution (3D)
zres(elev) # vertical resolution
xres(elev) # vertical resolution
yres(elev) # vertical resolution
zres(elev) # vertical resolution

# cell counts
ncell(elev) # cells
ncell3d(elev) # cells (3D rasters only)

# number of NA and non-NA cells
nacell(elev)
nonnacell(elev)

# topology
topology(elev) # number of dimensions
is.2d(elev) # is it 2-dimensional?
is.3d(elev) # is it 3-dimensional?

minmax(elev) # min/max values

# information on the GRASS session in which the GRaster is located
location(elev) # location
mapset(elev) # mapset

# "names" of the object
names(elev)

# coordinate reference system
crs(elev)
st_crs(elev)

# extent (bounding box)
ext(elev)
st_bbox(elev)

# vertical extent (not defined for this raster)
zext(elev)

# data type
datatype(elev) # fasterRaster type
datatype(elev, "GRASS") # GRASS type
datatype(elev, "terra") # terra type
datatype(elev, "GDAL") # GDAL type

is.integer(elev)
is.float(elev)
is.double(elev)
is.factor(elev)

# convert data type
as.int(elev) # integer; note that "elev" is already of type "integer"
as.float(elev) # floating-precision
as.doub(elev) # double-precision

# assigning
pie <- elev
pie[] <- pi # assign all cells to the value of pi
pie

# concatenating multiple GRasters
rasts <- c(elev, forest)
rasts

# subsetting
rasts[[1]]
rasts[["madForest2000"]]

# replacing
rasts[[2]] <- 2 * forest
rasts

# adding layers
rasts[[3]] <- elev > 500 # add a layer
rasts <- c(rasts, sqrt(elev)) # add another
add(rasts) <- ln(elev)

# names
names(rasts)
names(rasts) <- c("elev_meters", "2_x_forest", "high_elevation", "sqrt_elev", "ln_elev")
rasts

# remove a layer
rasts[["2_x_forest"]] <- NULL
rasts

# number of layers
nlyr(rasts)

# cell frequencies
freq(elev)
freq(2 * elev)
freq(rasts)
freq(rasts, value = 1)

# projecting a raster from disk to location's CRS
madLANDSAT <- fastData("madLANDSAT")
landsat <- fast(madLANDSAT) # projects matrix

# correlation and covariance matrices
cor(landsat) # correlation
cov(landsat) # covariance

}
}
\seealso{
\code{\link[=datatype]{datatype()}}, \code{\link[terra:datatype]{terra::datatype()}}, \code{\link[=is.int]{is.int()}}, \code{\link[=is.float]{is.float()}}, \code{\link[=is.doub]{is.doub()}}, \link{levels<-}, \link[=tutorial_raster_data_types]{raster data types} in \strong{fasterRaster}
}
