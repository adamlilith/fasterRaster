% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dim.r
\name{dim,GRegion-method}
\alias{dim,GRegion-method}
\alias{dim}
\alias{dim,GRaster-method}
\alias{nrow,missing-method}
\alias{nrow}
\alias{nrow,GRegion-method}
\alias{ncol,missing-method}
\alias{ncol}
\alias{ncol,GRegion-method}
\alias{ndepth,missing-method}
\alias{ndepth}
\alias{ndepth,GRegion-method}
\alias{ncell,missing-method}
\alias{ncell}
\alias{ncell,GRegion-method}
\alias{ncell3d,missing-method}
\alias{ncell3d}
\alias{ncell3d,GRegion-method}
\alias{dim,GVector-method}
\alias{nrow,GVector-method}
\alias{ncol,GVector-method}
\alias{nlyr,missing-method}
\alias{nlyr}
\alias{nlyr,GRaster-method}
\title{Number of rows, columns, depths, cells, and layers}
\usage{
\S4method{dim}{GRegion}(x)

\S4method{dim}{GRaster}(x)

\S4method{nrow}{missing}(x)

\S4method{nrow}{GRegion}(x)

\S4method{ncol}{missing}(x)

\S4method{ncol}{GRegion}(x)

\S4method{ndepth}{missing}(x)

\S4method{ndepth}{GRegion}(x)

\S4method{ncell}{missing}(x)

\S4method{ncell}{GRegion}(x)

\S4method{ncell3d}{missing}(x)

\S4method{ncell3d}{GRegion}(x)

\S4method{dim}{GVector}(x)

\S4method{nrow}{GVector}(x)

\S4method{ncol}{GVector}(x)

\S4method{nlyr}{missing}(x)

\S4method{nlyr}{GRaster}(x)
}
\arguments{
\item{x}{A \code{GRegion}, \code{GRaster}, \code{GVector}, or missing. If missing, then the dimensions of the currently active \link[=tutorial_regions]{region} are returned.}
}
\value{
A numeric value or vector.
}
\description{
Number of rows, columns, depths, and cells of a \code{GRegion}:
\itemize{
\item \code{dim()}: Rows, columns, depths, and layers
\item \code{nrow()}: Rows
\item \code{ncol()}: Columns
\item \code{ndepth()}: Depths (for 3-dimensional rasters only)
\item \code{ncell()}: Number of cells (2 dimensions)
\item \code{ncell3d()}: Number of cells (3 dimensions)
}

For \code{GRaster}s: As above, plus number of layers:
\itemize{
\item \code{nlyr()}: Layers (number of "stacked" rasters--different from depths of a raster).
}

For \code{GVector}s: Number of geometries and fields (columns):
\itemize{
\item \code{dim()}: Number of geometries and fields
\item \code{nrow()}: Number of geometries
\item \code{ncol()}: Number of fields (columns)
}
}
\examples{
\dontrun{
# NB This example is in a "dontrun{}" block because it requires users to have
# GRASS GIS Version 8+ installed on their system.

# IMPORTANT #1: If you already have a GRASS session started, you will need to
# run the line below and the last line in this example to work with it again.
# If you have not started a GRASS session, you can skip this step and go to
# step #2.
opts. <- getFastOptions()

# IMPORTANT #2: Select the appropriate line below and change as necessary to
# where GRASS is installed on your system.
grassDir <- "/Applications/GRASS-8.3.app/Contents/Resources" # Mac
grassDir <- "C:/Program Files/GRASS GIS 8.3" # Windows
grassDir <- "/usr/local/grass" # Linux

# setup
library(sf)
library(terra)

# example data
madElev <- fastData("madElev")
madCoast0 <- fastData("madCoast0")
madRivers <- fastData("madRivers")
madDypsis <- fastData("madDypsis")

# start GRASS session for examples only
faster(x = madElev, grassDir = grassDir,
workDir = tempdir(), location = "examples") # line only needed for examples

### GRaster properties
######################

# convert SpatRasters to GRasters
elev <- fast(madElev)
plot(elev)

dim(elev) # rows, columns, depths, layers
nrow(elev) # rows
ncol(elev) # columns
ndepth(elev) # depths
nlyr(elev) # layers

res(elev) # resolution

ncell(elev) # cells
ncell3d(elev) # cells (3D rasters only)

topology(elev) # number of dimensions
is.2d(elev) # is it 2D?
is.3d(elev) # is it 3D?

minmax(elev) # min/max values

# information on the GRASS session in which the GRaster is located
location(elev) # location
mapset(elev) # mapset

# "names" of the object
names(elev)

# coordinate reference system
crs(elev)
st_crs(elev)

# extent (bounding box)
ext(elev)
st_bbox(elev)

# data type
datatype(elev)

# assigning
copy <- elev
copy[] <- pi # assign all cells to the value of pi
copy

# concatenating multiple GRasters
rasts <- c(elev, forest)
rasts

# adding a raster "in place"
add(rasts) <- ln(elev)
rasts

# subsetting
rasts[[1]]
rasts[["forest"]]

# assigning
rasts[[4]] <- elev > 500

# number of layers
nlyr(rasts)

# names
names(rasts)
names(rasts) <- c("elev_meters", "forest", "ln_elev", "high_elevation")
rasts

### GVector properties
######################

# convert sf vectors to GVectors
coast <- fast(madCoast4)
rivers <- fast(madRivers)
dypsis <- fast(madDypsis)

# extent
ext(rivers)
st_bbox(rivers) # extent

W(rivers) # western extent
E(rivers) # eastern extent
S(rivers) # southern extent
N(rivers) # northern extent
top(rivers) # top extent
bottom(rivers) # bottom extent

# coordinate reference system
crs(rivers)
st_crs(rivers)

# column names and data types
names(coast)
datatype(coast)

# session information
location(rivers) # GRASS location
mapset(rivers) # GRASS mapset

# points, lines, or polygons?
geomtype(dypsis)
geomtype(rivers)
geomtype(coast)

is.points(dypsis)
is.points(coast)

is.lines(rivers)
is.lines(dypsis)

is.polygons(coast)
is.polygons(dypsis)

# dimensions
nrow(rivers) # how many spatial features
ncol(rivers) # hay many columns in the data frame

# 2- or 3D
topology(rivers) # dimensionality
is.2d(elev) # is it 2D?
is.3d(elev) # is it 3D?

# refresh values from GRASS
# (reads values from GRASS... does not appear to do anything in this case)
refresh(elev)

### operations on GVectors
##########################

# convert to data frame
as.data.frame(rivers)

# refresh values from GRASS
# (reads values from GRASS... does not appear to do anything in this case)
refresh(rivers)

# IMPORTANT #3: Revert back to original GRASS session if needed.
restoreSession(opts.)
removeSession("examples")

}
}
\seealso{
\code{\link[terra:dimensions]{terra::dim()}}
}
