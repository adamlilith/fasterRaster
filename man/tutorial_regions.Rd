% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tutorial_regions.r
\name{tutorial_regions}
\alias{tutorial_regions}
\title{An explanation of GRASS "regions"}
\description{
A \strong{GRASS} \emph{region} is a data structure like a raster in that it is composed of "cells", but different in that these cells do not contain values. Rather, their resolution and the extent of the region influence how rasters are imported, created, processed, and exported. In most cases, whenever a raster undergoes one of these processes using a \strong{GRASS} module, the raster will be resampled and/or crop/extend it so that matches the region's extent and resolution. If ignored, this can cause unintended side effects if the region's geometry doesn't match the raster being processed.

Generally, most users of \strong{fasterRaster} will not need to know how regions work because their management is handled automatically.  This help page is provided to assist power users who may wish to use regions explicitly or develop their own applications based on \strong{fasterRaster}.

Each \strong{GRASS} \link[=tutorial_sessions]{session} typically has one active region. The extent and resolution of this region is initially set by the first raster that is imported into it.
\subsection{Functions for managing regions in \strong{fasterRaster}}{

\strong{fasterRaster} provides functions for managing regions:\cr
\code{\link[=region]{region()}}: Extent \emph{and} dimensions/resolution of a region. This function is used by many other \strong{fasterRaster} functions before raster processing to ensure the raster is not changed (by the region).\cr
\code{\link[=regionDim]{regionDim()}}: Dimensions (number of rows and columns)\cr
\code{\link[=regionExt]{regionExt()}}: Extent\cr
\code{\link[=regionRes]{regionRes()}}: Resolution\cr

Most of these functions can be used in three different ways:
\itemize{
\item No arguments: The function reports the respective value(s) (e.g., \code{regionExt()} reports the extent of the region).
\item With a \code{GRaster}, \code{GVector}, \code{SpatRaster}, \code{SpatVector}, \code{sf} object, or \code{stars} object: Resizes and/or resamples the region so it has the same extent and/or resolution as the spatial object. Note that vector objects do not have a resolution, so cannot be used in functions that resample the region's resolution.
\item With numeric values (i.e., representing extent, resolution, or dimensions): Resize or resample the region so it has these dimensions. When a region's extent is resized or resolution is changed, it will be extended to have the next-larger number of rows and/or columns so it can accommodate cells of the desired size.
}

Regions are inherently 3-dimensional, but often have a single depth (i.e., one "layer" of cells).
}

\subsection{Automatic management of regions}{

Automatic resizing/resampling of the region is performed by default if the \strong{fasterRaster} option \code{autoRegion} is \code{TRUE}. To turn off automatic region handling, use \code{setFastOptions(autoRegion = FALSE)}. This is risky and can result in unexpected output, so please only do this if you want to manually manipulate regions.
}
}
\examples{
\dontrun{
# NB This example is in a "dontrun{}" block because it requires users to have
# GRASS GIS Version 8+ installed on their system.

# IMPORTANT #1: If you already have a GRASS session started, you will need to
# run the line below and the last line in this example to work with it again.
# If you have not started a GRASS session, you can skip this step and go to
# step #2.
opts. <- getFastOptions()

# IMPORTANT #2: Select the appropriate line below and change as necessary to
# where GRASS is installed on your system.

grassDir <- "/Applications/GRASS-8.3.app/Contents/Resources" # Mac
grassDir <- 'C:/Program Files/GRASS GIS 8.3' # Windows
grassDir <- '/usr/local/grass' # Linux

# setup
library(terra)

# example data
madElev <- fastData('madElev')
madRivers <- fastData('madRivers')

# set up one location
faster(x = madElev, grassDir = grassDir,
workDir = tempdir(), location = 'examples') # line only needed for examples

# Importing a raster sets the region to match its extent and dimensions.
elev <- fast(madElev)
elev
region()

# Importing a vector does not change the region.
dypsis <- fast(madDypsis)
region()

# report information on current region
(start <- region())
regionDim()
regionExt()
regionRes()

# coarsen grid... sets region to match aggregated raster's extent and dimensions
aggElev <- aggregate(elev, 2) 

# reset region dimensions
regionDim()
regionDim(elev, respect='resolution')
regionDim()

# reset region extent
regionExt()
regionExt(dypsis, respect='resolution')
regionExt()

# reset region resolution
regionRes()
regionRes(elev, respect='extent')
regionRes()

# reset region
(region(start))

# IMPORTANT #3: Revert back to original GRASS session if needed.
fastRestore(opts.)
removeSession('examples')

}
}
\keyword{tutorial}
