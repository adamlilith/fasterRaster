% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subset_assign.r
\name{subset_assign}
\alias{subset_assign}
\alias{[[<-,GRaster,ANY-method}
\alias{[[<-}
\alias{add<-,GRaster,GRaster-method}
\alias{add<-}
\alias{[<-,GRaster,ANY,ANY-method}
\alias{[,GVector,ANY,ANY-method}
\alias{[[,GVector,ANY,ANY-method}
\title{Sub-setting operator for GRasters and GVectors}
\usage{
\S4method{[[}{GRaster,ANY,ANY}(x, i)

\S4method{[[}{GRaster,ANY}(x, i, j) <- value

\S4method{add}{GRaster,GRaster}(x) <- value

\S4method{[}{GRaster,ANY,ANY}(x) <- value

\S4method{[}{GVector,ANY,ANY}(x, i)

\S4method{[[}{GVector,ANY,ANY}(x, i)
}
\arguments{
\item{x}{A \code{GVector}, or a \code{GRaster} with one or more layers.}

\item{i}{A character, numeric, integer, or logical vector:
\itemize{
\item \code{GVector}s:
\itemize{
\item \code{[} operator: Indicates the geometries/rows to retain.
\item \code{[[} operator: Indicates which columns to retain of a \code{GVector} or which layers to replace or subset of a \code{GRaster}.
}
}}

\item{j}{Not used.}

\item{value}{A numeric, integer, logical value (including \code{NA}), or \code{NULL}: Value to assign to all cells in a raster.}
}
\value{
A \code{GRaster}.
}
\description{
The \code{[} and \code{[[} operators do different things depending on whether they are applied to a \code{GRaster} or \code{GVector}:
\itemize{
\item \code{GVector}s:
\itemize{
\item \code{[} operator: Returns a subset of geometries (i.e., points, lines, or polygons) of the \code{GVector}. For example, \code{vector[2:4]} will return the second through the fourth geometries.
\item \code{[[} operator: Returns a vector with the selected columns in its data frame. For example, \code{vector[[2:4]]} returns the \code{GVector}, but with just columns 2 through 4 of the data frame.
}
\item \code{GRaster}s:
\itemize{
\item \code{[} operator with the assignment operator, \verb{<-}: Assigns the given value to all cells in the \code{GRaster}. For examples, \code{raster[] <- 7} replaces all cell values in \code{raster} with 7.
\item \code{[[} operator: Returns \code{GRaster}s from a "\link[=c]{stack}" of \code{GRaster}s. For example, \code{raster[[2:3]]} returns the second and third rasters in a stack of \code{GRaster}s, and \code{raster[[c("bio1", "bio12")]]} returns the two rasters with \code{\link[=names]{names()}} "bio1" and "bio12".
\item \code{[[} operator with the assignment operator, \verb{<-}: Replaces existing layers or adds new layers to a \code{GRaster}. For example, \code{x[[2]] <- newRaster} makes the second layer of \code{x} \code{newRaster}. If \code{x} already has two layers, the second one is replaced. If it only had one layer, a second is added.
\item \verb{add<-}: "Stacks" two \code{GRaster}s. This is the same as stacking rasters with \code{\link[=c]{c()}}. For example, you \code{c(raster1, raster2)} and \code{add(raster1) <- raster2} are equivalent.
}
}
}
\examples{
\dontrun{
# NB This example is in a "dontrun{}" block because it requires users to have
# GRASS GIS Version 8+ installed on their system.

# IMPORTANT #1: If you already have a GRASS session started, you will need to
# run the line below and the last line in this example to work with it again.
# If you have not started a GRASS session, you can skip this step and go to
# step #2.
opts. <- getFastOptions()

# IMPORTANT #2: Select the appropriate line below and change as necessary to
# where GRASS is installed on your system.
grassDir <- "/Applications/GRASS-8.3.app/Contents/Resources" # Mac
grassDir <- "C:/Program Files/GRASS GIS 8.3" # Windows
grassDir <- "/usr/local/grass" # Linux

# setup
library(sf)
library(terra)

# example data
madElev <- fastData("madElev")
madCoast0 <- fastData("madCoast0")
madRivers <- fastData("madRivers")
madDypsis <- fastData("madDypsis")

# start GRASS session for examples only
faster(x = madElev, grassDir = grassDir,
workDir = tempdir(), location = "examples") # line only needed for examples

### GRaster properties
######################

# convert SpatRasters to GRasters
elev <- fast(madElev)
plot(elev)

dim(elev) # rows, columns, depths, layers
nrow(elev) # rows
ncol(elev) # columns
ndepth(elev) # depths
nlyr(elev) # layers

res(elev) # resolution

ncell(elev) # cells
ncell3d(elev) # cells (3D rasters only)

topology(elev) # number of dimensions
is.2d(elev) # is it 2D?
is.3d(elev) # is it 3D?

minmax(elev) # min/max values

# information on the GRASS session in which the GRaster is located
location(elev) # location
mapset(elev) # mapset

# "names" of the object
names(elev)

# coordinate reference system
crs(elev)
st_crs(elev)

# extent (bounding box)
ext(elev)
st_bbox(elev)

# data type
datatype(elev)

# assigning
copy <- elev
copy[] <- pi # assign all cells to the value of pi
copy

# concatenating multiple GRasters
rasts <- c(elev, forest)
rasts

# adding a raster "in place"
add(rasts) <- ln(elev)
rasts

# subsetting
rasts[[1]]
rasts[["forest"]]

# assigning
rasts[[4]] <- elev > 500

# number of layers
nlyr(rasts)

# names
names(rasts)
names(rasts) <- c("elev_meters", "forest", "ln_elev", "high_elevation")
rasts

### GVector properties
######################

# convert sf vectors to GVectors
coast <- fast(madCoast4)
rivers <- fast(madRivers)
dypsis <- fast(madDypsis)

# extent
ext(rivers)
st_bbox(rivers) # extent

W(rivers) # western extent
E(rivers) # eastern extent
S(rivers) # southern extent
N(rivers) # northern extent
top(rivers) # top extent
bottom(rivers) # bottom extent

# coordinate reference system
crs(rivers)
st_crs(rivers)

# column names and data types
names(coast)
datatype(coast)

# session information
location(rivers) # GRASS location
mapset(rivers) # GRASS mapset

# points, lines, or polygons?
geomtype(dypsis)
geomtype(rivers)
geomtype(coast)

is.points(dypsis)
is.points(coast)

is.lines(rivers)
is.lines(dypsis)

is.polygons(coast)
is.polygons(dypsis)

# dimensions
nrow(rivers) # how many spatial features
ncol(rivers) # hay many columns in the data frame

# 2- or 3D
topology(rivers) # dimensionality
is.2d(elev) # is it 2D?
is.3d(elev) # is it 3D?

# refresh values from GRASS
# (reads values from GRASS... does not appear to do anything in this case)
refresh(elev)

### operations on GVectors
##########################

# convert to data frame
as.data.frame(rivers)

# refresh values from GRASS
# (reads values from GRASS... does not appear to do anything in this case)
refresh(rivers)

# IMPORTANT #3: Revert back to original GRASS session if needed.
fastRestore(opts.)
removeSession("examples")

}
}
